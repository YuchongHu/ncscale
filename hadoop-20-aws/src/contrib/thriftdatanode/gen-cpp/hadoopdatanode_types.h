/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hadoopdatanode_TYPES_H
#define hadoopdatanode_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _ThdfsNamespaceId__isset {
  _ThdfsNamespaceId__isset() : id(false) {}
  bool id;
} _ThdfsNamespaceId__isset;

class ThdfsNamespaceId {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ThdfsNamespaceId() : id(0) {
  }

  virtual ~ThdfsNamespaceId() throw() {}

  int32_t id;

  _ThdfsNamespaceId__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const ThdfsNamespaceId & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ThdfsNamespaceId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThdfsNamespaceId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThdfsBlock__isset {
  _ThdfsBlock__isset() : blockId(false), numBytes(false), generationStamp(false) {}
  bool blockId;
  bool numBytes;
  bool generationStamp;
} _ThdfsBlock__isset;

class ThdfsBlock {
 public:

  static const char* ascii_fingerprint; // = "EA2D65F1E0BB78760205682082304B41";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x2D,0x65,0xF1,0xE0,0xBB,0x78,0x76,0x02,0x05,0x68,0x20,0x82,0x30,0x4B,0x41};

  ThdfsBlock() : blockId(0), numBytes(0), generationStamp(0) {
  }

  virtual ~ThdfsBlock() throw() {}

  int64_t blockId;
  int64_t numBytes;
  int64_t generationStamp;

  _ThdfsBlock__isset __isset;

  void __set_blockId(const int64_t val) {
    blockId = val;
  }

  void __set_numBytes(const int64_t val) {
    numBytes = val;
  }

  void __set_generationStamp(const int64_t val) {
    generationStamp = val;
  }

  bool operator == (const ThdfsBlock & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    if (!(numBytes == rhs.numBytes))
      return false;
    if (!(generationStamp == rhs.generationStamp))
      return false;
    return true;
  }
  bool operator != (const ThdfsBlock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThdfsBlock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThdfsBlockPath__isset {
  _ThdfsBlockPath__isset() : localBlockPath(false), localMetaPath(false) {}
  bool localBlockPath;
  bool localMetaPath;
} _ThdfsBlockPath__isset;

class ThdfsBlockPath {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ThdfsBlockPath() : localBlockPath(""), localMetaPath("") {
  }

  virtual ~ThdfsBlockPath() throw() {}

  std::string localBlockPath;
  std::string localMetaPath;

  _ThdfsBlockPath__isset __isset;

  void __set_localBlockPath(const std::string& val) {
    localBlockPath = val;
  }

  void __set_localMetaPath(const std::string& val) {
    localMetaPath = val;
  }

  bool operator == (const ThdfsBlockPath & rhs) const
  {
    if (!(localBlockPath == rhs.localBlockPath))
      return false;
    if (!(localMetaPath == rhs.localMetaPath))
      return false;
    return true;
  }
  bool operator != (const ThdfsBlockPath &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThdfsBlockPath & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDatanodeID__isset {
  _TDatanodeID__isset() : name(false) {}
  bool name;
} _TDatanodeID__isset;

class TDatanodeID {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TDatanodeID() : name("") {
  }

  virtual ~TDatanodeID() throw() {}

  std::string name;

  _TDatanodeID__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const TDatanodeID & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const TDatanodeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDatanodeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MalformedInputException__isset {
  _MalformedInputException__isset() : message(false) {}
  bool message;
} _MalformedInputException__isset;

class MalformedInputException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MalformedInputException() : message("") {
  }

  virtual ~MalformedInputException() throw() {}

  std::string message;

  _MalformedInputException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const MalformedInputException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MalformedInputException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MalformedInputException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftIOException__isset {
  _ThriftIOException__isset() : message(false) {}
  bool message;
} _ThriftIOException__isset;

class ThriftIOException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ThriftIOException() : message("") {
  }

  virtual ~ThriftIOException() throw() {}

  std::string message;

  _ThriftIOException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ThriftIOException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ThriftIOException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftIOException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
