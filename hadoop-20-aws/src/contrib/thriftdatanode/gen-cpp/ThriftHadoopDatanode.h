/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ThriftHadoopDatanode_H
#define ThriftHadoopDatanode_H

#include <TProcessor.h>
#include "hadoopdatanode_types.h"



class ThriftHadoopDatanodeIf {
 public:
  virtual ~ThriftHadoopDatanodeIf() {}
  virtual void recoverBlock(ThdfsBlock& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block, const bool keepLength, const std::vector<TDatanodeID> & targets, const int64_t deadline) = 0;
  virtual void getBlockInfo(ThdfsBlock& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceid, const ThdfsBlock& block) = 0;
  virtual void copyBlock(const TDatanodeID& datanode, const ThdfsNamespaceId& srcNamespaceId, const ThdfsBlock& srcblock, const ThdfsNamespaceId& dstNamespaceId, const ThdfsBlock& destBlock, const TDatanodeID& target, const bool asynchronous) = 0;
  virtual void getBlockPathInfo(ThdfsBlockPath& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block) = 0;
};

class ThriftHadoopDatanodeNull : virtual public ThriftHadoopDatanodeIf {
 public:
  virtual ~ThriftHadoopDatanodeNull() {}
  void recoverBlock(ThdfsBlock& /* _return */, const TDatanodeID& /* datanode */, const ThdfsNamespaceId& /* namespaceId */, const ThdfsBlock& /* block */, const bool /* keepLength */, const std::vector<TDatanodeID> & /* targets */, const int64_t /* deadline */) {
    return;
  }
  void getBlockInfo(ThdfsBlock& /* _return */, const TDatanodeID& /* datanode */, const ThdfsNamespaceId& /* namespaceid */, const ThdfsBlock& /* block */) {
    return;
  }
  void copyBlock(const TDatanodeID& /* datanode */, const ThdfsNamespaceId& /* srcNamespaceId */, const ThdfsBlock& /* srcblock */, const ThdfsNamespaceId& /* dstNamespaceId */, const ThdfsBlock& /* destBlock */, const TDatanodeID& /* target */, const bool /* asynchronous */) {
    return;
  }
  void getBlockPathInfo(ThdfsBlockPath& /* _return */, const TDatanodeID& /* datanode */, const ThdfsNamespaceId& /* namespaceId */, const ThdfsBlock& /* block */) {
    return;
  }
};

typedef struct _ThriftHadoopDatanode_recoverBlock_args__isset {
  _ThriftHadoopDatanode_recoverBlock_args__isset() : datanode(false), namespaceId(false), block(false), keepLength(false), targets(false), deadline(false) {}
  bool datanode;
  bool namespaceId;
  bool block;
  bool keepLength;
  bool targets;
  bool deadline;
} _ThriftHadoopDatanode_recoverBlock_args__isset;

class ThriftHadoopDatanode_recoverBlock_args {
 public:

  ThriftHadoopDatanode_recoverBlock_args() : keepLength(0), deadline(0) {
  }

  virtual ~ThriftHadoopDatanode_recoverBlock_args() throw() {}

  TDatanodeID datanode;
  ThdfsNamespaceId namespaceId;
  ThdfsBlock block;
  bool keepLength;
  std::vector<TDatanodeID>  targets;
  int64_t deadline;

  _ThriftHadoopDatanode_recoverBlock_args__isset __isset;

  void __set_datanode(const TDatanodeID& val) {
    datanode = val;
  }

  void __set_namespaceId(const ThdfsNamespaceId& val) {
    namespaceId = val;
  }

  void __set_block(const ThdfsBlock& val) {
    block = val;
  }

  void __set_keepLength(const bool val) {
    keepLength = val;
  }

  void __set_targets(const std::vector<TDatanodeID> & val) {
    targets = val;
  }

  void __set_deadline(const int64_t val) {
    deadline = val;
  }

  bool operator == (const ThriftHadoopDatanode_recoverBlock_args & rhs) const
  {
    if (!(datanode == rhs.datanode))
      return false;
    if (!(namespaceId == rhs.namespaceId))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(keepLength == rhs.keepLength))
      return false;
    if (!(targets == rhs.targets))
      return false;
    if (!(deadline == rhs.deadline))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_recoverBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_recoverBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopDatanode_recoverBlock_pargs {
 public:


  virtual ~ThriftHadoopDatanode_recoverBlock_pargs() throw() {}

  const TDatanodeID* datanode;
  const ThdfsNamespaceId* namespaceId;
  const ThdfsBlock* block;
  const bool* keepLength;
  const std::vector<TDatanodeID> * targets;
  const int64_t* deadline;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_recoverBlock_result__isset {
  _ThriftHadoopDatanode_recoverBlock_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopDatanode_recoverBlock_result__isset;

class ThriftHadoopDatanode_recoverBlock_result {
 public:

  ThriftHadoopDatanode_recoverBlock_result() {
  }

  virtual ~ThriftHadoopDatanode_recoverBlock_result() throw() {}

  ThdfsBlock success;
  ThriftIOException ouch;

  _ThriftHadoopDatanode_recoverBlock_result__isset __isset;

  void __set_success(const ThdfsBlock& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopDatanode_recoverBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_recoverBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_recoverBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_recoverBlock_presult__isset {
  _ThriftHadoopDatanode_recoverBlock_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopDatanode_recoverBlock_presult__isset;

class ThriftHadoopDatanode_recoverBlock_presult {
 public:


  virtual ~ThriftHadoopDatanode_recoverBlock_presult() throw() {}

  ThdfsBlock* success;
  ThriftIOException ouch;

  _ThriftHadoopDatanode_recoverBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopDatanode_getBlockInfo_args__isset {
  _ThriftHadoopDatanode_getBlockInfo_args__isset() : datanode(false), namespaceid(false), block(false) {}
  bool datanode;
  bool namespaceid;
  bool block;
} _ThriftHadoopDatanode_getBlockInfo_args__isset;

class ThriftHadoopDatanode_getBlockInfo_args {
 public:

  ThriftHadoopDatanode_getBlockInfo_args() {
  }

  virtual ~ThriftHadoopDatanode_getBlockInfo_args() throw() {}

  TDatanodeID datanode;
  ThdfsNamespaceId namespaceid;
  ThdfsBlock block;

  _ThriftHadoopDatanode_getBlockInfo_args__isset __isset;

  void __set_datanode(const TDatanodeID& val) {
    datanode = val;
  }

  void __set_namespaceid(const ThdfsNamespaceId& val) {
    namespaceid = val;
  }

  void __set_block(const ThdfsBlock& val) {
    block = val;
  }

  bool operator == (const ThriftHadoopDatanode_getBlockInfo_args & rhs) const
  {
    if (!(datanode == rhs.datanode))
      return false;
    if (!(namespaceid == rhs.namespaceid))
      return false;
    if (!(block == rhs.block))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_getBlockInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_getBlockInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopDatanode_getBlockInfo_pargs {
 public:


  virtual ~ThriftHadoopDatanode_getBlockInfo_pargs() throw() {}

  const TDatanodeID* datanode;
  const ThdfsNamespaceId* namespaceid;
  const ThdfsBlock* block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_getBlockInfo_result__isset {
  _ThriftHadoopDatanode_getBlockInfo_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopDatanode_getBlockInfo_result__isset;

class ThriftHadoopDatanode_getBlockInfo_result {
 public:

  ThriftHadoopDatanode_getBlockInfo_result() {
  }

  virtual ~ThriftHadoopDatanode_getBlockInfo_result() throw() {}

  ThdfsBlock success;
  ThriftIOException ouch;

  _ThriftHadoopDatanode_getBlockInfo_result__isset __isset;

  void __set_success(const ThdfsBlock& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopDatanode_getBlockInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_getBlockInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_getBlockInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_getBlockInfo_presult__isset {
  _ThriftHadoopDatanode_getBlockInfo_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopDatanode_getBlockInfo_presult__isset;

class ThriftHadoopDatanode_getBlockInfo_presult {
 public:


  virtual ~ThriftHadoopDatanode_getBlockInfo_presult() throw() {}

  ThdfsBlock* success;
  ThriftIOException ouch;

  _ThriftHadoopDatanode_getBlockInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopDatanode_copyBlock_args__isset {
  _ThriftHadoopDatanode_copyBlock_args__isset() : datanode(false), srcNamespaceId(false), srcblock(false), dstNamespaceId(false), destBlock(false), target(false), asynchronous(false) {}
  bool datanode;
  bool srcNamespaceId;
  bool srcblock;
  bool dstNamespaceId;
  bool destBlock;
  bool target;
  bool asynchronous;
} _ThriftHadoopDatanode_copyBlock_args__isset;

class ThriftHadoopDatanode_copyBlock_args {
 public:

  ThriftHadoopDatanode_copyBlock_args() : asynchronous(0) {
  }

  virtual ~ThriftHadoopDatanode_copyBlock_args() throw() {}

  TDatanodeID datanode;
  ThdfsNamespaceId srcNamespaceId;
  ThdfsBlock srcblock;
  ThdfsNamespaceId dstNamespaceId;
  ThdfsBlock destBlock;
  TDatanodeID target;
  bool asynchronous;

  _ThriftHadoopDatanode_copyBlock_args__isset __isset;

  void __set_datanode(const TDatanodeID& val) {
    datanode = val;
  }

  void __set_srcNamespaceId(const ThdfsNamespaceId& val) {
    srcNamespaceId = val;
  }

  void __set_srcblock(const ThdfsBlock& val) {
    srcblock = val;
  }

  void __set_dstNamespaceId(const ThdfsNamespaceId& val) {
    dstNamespaceId = val;
  }

  void __set_destBlock(const ThdfsBlock& val) {
    destBlock = val;
  }

  void __set_target(const TDatanodeID& val) {
    target = val;
  }

  void __set_asynchronous(const bool val) {
    asynchronous = val;
  }

  bool operator == (const ThriftHadoopDatanode_copyBlock_args & rhs) const
  {
    if (!(datanode == rhs.datanode))
      return false;
    if (!(srcNamespaceId == rhs.srcNamespaceId))
      return false;
    if (!(srcblock == rhs.srcblock))
      return false;
    if (!(dstNamespaceId == rhs.dstNamespaceId))
      return false;
    if (!(destBlock == rhs.destBlock))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(asynchronous == rhs.asynchronous))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_copyBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_copyBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopDatanode_copyBlock_pargs {
 public:


  virtual ~ThriftHadoopDatanode_copyBlock_pargs() throw() {}

  const TDatanodeID* datanode;
  const ThdfsNamespaceId* srcNamespaceId;
  const ThdfsBlock* srcblock;
  const ThdfsNamespaceId* dstNamespaceId;
  const ThdfsBlock* destBlock;
  const TDatanodeID* target;
  const bool* asynchronous;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_copyBlock_result__isset {
  _ThriftHadoopDatanode_copyBlock_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopDatanode_copyBlock_result__isset;

class ThriftHadoopDatanode_copyBlock_result {
 public:

  ThriftHadoopDatanode_copyBlock_result() {
  }

  virtual ~ThriftHadoopDatanode_copyBlock_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopDatanode_copyBlock_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopDatanode_copyBlock_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_copyBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_copyBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_copyBlock_presult__isset {
  _ThriftHadoopDatanode_copyBlock_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopDatanode_copyBlock_presult__isset;

class ThriftHadoopDatanode_copyBlock_presult {
 public:


  virtual ~ThriftHadoopDatanode_copyBlock_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopDatanode_copyBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopDatanode_getBlockPathInfo_args__isset {
  _ThriftHadoopDatanode_getBlockPathInfo_args__isset() : datanode(false), namespaceId(false), block(false) {}
  bool datanode;
  bool namespaceId;
  bool block;
} _ThriftHadoopDatanode_getBlockPathInfo_args__isset;

class ThriftHadoopDatanode_getBlockPathInfo_args {
 public:

  ThriftHadoopDatanode_getBlockPathInfo_args() {
  }

  virtual ~ThriftHadoopDatanode_getBlockPathInfo_args() throw() {}

  TDatanodeID datanode;
  ThdfsNamespaceId namespaceId;
  ThdfsBlock block;

  _ThriftHadoopDatanode_getBlockPathInfo_args__isset __isset;

  void __set_datanode(const TDatanodeID& val) {
    datanode = val;
  }

  void __set_namespaceId(const ThdfsNamespaceId& val) {
    namespaceId = val;
  }

  void __set_block(const ThdfsBlock& val) {
    block = val;
  }

  bool operator == (const ThriftHadoopDatanode_getBlockPathInfo_args & rhs) const
  {
    if (!(datanode == rhs.datanode))
      return false;
    if (!(namespaceId == rhs.namespaceId))
      return false;
    if (!(block == rhs.block))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_getBlockPathInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_getBlockPathInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopDatanode_getBlockPathInfo_pargs {
 public:


  virtual ~ThriftHadoopDatanode_getBlockPathInfo_pargs() throw() {}

  const TDatanodeID* datanode;
  const ThdfsNamespaceId* namespaceId;
  const ThdfsBlock* block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_getBlockPathInfo_result__isset {
  _ThriftHadoopDatanode_getBlockPathInfo_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopDatanode_getBlockPathInfo_result__isset;

class ThriftHadoopDatanode_getBlockPathInfo_result {
 public:

  ThriftHadoopDatanode_getBlockPathInfo_result() {
  }

  virtual ~ThriftHadoopDatanode_getBlockPathInfo_result() throw() {}

  ThdfsBlockPath success;
  ThriftIOException ouch;

  _ThriftHadoopDatanode_getBlockPathInfo_result__isset __isset;

  void __set_success(const ThdfsBlockPath& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopDatanode_getBlockPathInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopDatanode_getBlockPathInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopDatanode_getBlockPathInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopDatanode_getBlockPathInfo_presult__isset {
  _ThriftHadoopDatanode_getBlockPathInfo_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopDatanode_getBlockPathInfo_presult__isset;

class ThriftHadoopDatanode_getBlockPathInfo_presult {
 public:


  virtual ~ThriftHadoopDatanode_getBlockPathInfo_presult() throw() {}

  ThdfsBlockPath* success;
  ThriftIOException ouch;

  _ThriftHadoopDatanode_getBlockPathInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHadoopDatanodeClient : virtual public ThriftHadoopDatanodeIf {
 public:
  ThriftHadoopDatanodeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ThriftHadoopDatanodeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recoverBlock(ThdfsBlock& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block, const bool keepLength, const std::vector<TDatanodeID> & targets, const int64_t deadline);
  void send_recoverBlock(const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block, const bool keepLength, const std::vector<TDatanodeID> & targets, const int64_t deadline);
  void recv_recoverBlock(ThdfsBlock& _return);
  void getBlockInfo(ThdfsBlock& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceid, const ThdfsBlock& block);
  void send_getBlockInfo(const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceid, const ThdfsBlock& block);
  void recv_getBlockInfo(ThdfsBlock& _return);
  void copyBlock(const TDatanodeID& datanode, const ThdfsNamespaceId& srcNamespaceId, const ThdfsBlock& srcblock, const ThdfsNamespaceId& dstNamespaceId, const ThdfsBlock& destBlock, const TDatanodeID& target, const bool asynchronous);
  void send_copyBlock(const TDatanodeID& datanode, const ThdfsNamespaceId& srcNamespaceId, const ThdfsBlock& srcblock, const ThdfsNamespaceId& dstNamespaceId, const ThdfsBlock& destBlock, const TDatanodeID& target, const bool asynchronous);
  void recv_copyBlock();
  void getBlockPathInfo(ThdfsBlockPath& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block);
  void send_getBlockPathInfo(const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block);
  void recv_getBlockPathInfo(ThdfsBlockPath& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftHadoopDatanodeProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ThriftHadoopDatanodeIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ThriftHadoopDatanodeProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_recoverBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlockInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_copyBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlockPathInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftHadoopDatanodeProcessor(boost::shared_ptr<ThriftHadoopDatanodeIf> iface) :
    iface_(iface) {
    processMap_["recoverBlock"] = &ThriftHadoopDatanodeProcessor::process_recoverBlock;
    processMap_["getBlockInfo"] = &ThriftHadoopDatanodeProcessor::process_getBlockInfo;
    processMap_["copyBlock"] = &ThriftHadoopDatanodeProcessor::process_copyBlock;
    processMap_["getBlockPathInfo"] = &ThriftHadoopDatanodeProcessor::process_getBlockPathInfo;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ThriftHadoopDatanodeProcessor() {}
};

class ThriftHadoopDatanodeMultiface : virtual public ThriftHadoopDatanodeIf {
 public:
  ThriftHadoopDatanodeMultiface(std::vector<boost::shared_ptr<ThriftHadoopDatanodeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftHadoopDatanodeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftHadoopDatanodeIf> > ifaces_;
  ThriftHadoopDatanodeMultiface() {}
  void add(boost::shared_ptr<ThriftHadoopDatanodeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void recoverBlock(ThdfsBlock& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block, const bool keepLength, const std::vector<TDatanodeID> & targets, const int64_t deadline) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->recoverBlock(_return, datanode, namespaceId, block, keepLength, targets, deadline);
        return;
      } else {
        ifaces_[i]->recoverBlock(_return, datanode, namespaceId, block, keepLength, targets, deadline);
      }
    }
  }

  void getBlockInfo(ThdfsBlock& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceid, const ThdfsBlock& block) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getBlockInfo(_return, datanode, namespaceid, block);
        return;
      } else {
        ifaces_[i]->getBlockInfo(_return, datanode, namespaceid, block);
      }
    }
  }

  void copyBlock(const TDatanodeID& datanode, const ThdfsNamespaceId& srcNamespaceId, const ThdfsBlock& srcblock, const ThdfsNamespaceId& dstNamespaceId, const ThdfsBlock& destBlock, const TDatanodeID& target, const bool asynchronous) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->copyBlock(datanode, srcNamespaceId, srcblock, dstNamespaceId, destBlock, target, asynchronous);
    }
  }

  void getBlockPathInfo(ThdfsBlockPath& _return, const TDatanodeID& datanode, const ThdfsNamespaceId& namespaceId, const ThdfsBlock& block) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getBlockPathInfo(_return, datanode, namespaceId, block);
        return;
      } else {
        ifaces_[i]->getBlockPathInfo(_return, datanode, namespaceId, block);
      }
    }
  }

};



#endif
