/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.corona;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SessionRegistrationData implements org.apache.thrift.TBase<SessionRegistrationData, SessionRegistrationData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SessionRegistrationData");

  private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLUSTER_MANAGER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterManagerInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField POOL_INFO_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("poolInfoStrings", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  public String handle; // required
  public ClusterManagerInfo clusterManagerInfo; // required
  public PoolInfoStrings poolInfoStrings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HANDLE((short)1, "handle"),
    CLUSTER_MANAGER_INFO((short)2, "clusterManagerInfo"),
    POOL_INFO_STRINGS((short)3, "poolInfoStrings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HANDLE
          return HANDLE;
        case 2: // CLUSTER_MANAGER_INFO
          return CLUSTER_MANAGER_INFO;
        case 3: // POOL_INFO_STRINGS
          return POOL_INFO_STRINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "SessionHandle")));
    tmpMap.put(_Fields.CLUSTER_MANAGER_INFO, new org.apache.thrift.meta_data.FieldMetaData("clusterManagerInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClusterManagerInfo.class)));
    tmpMap.put(_Fields.POOL_INFO_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("poolInfoStrings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PoolInfoStrings.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SessionRegistrationData.class, metaDataMap);
  }

  public SessionRegistrationData() {
  }

  public SessionRegistrationData(
    String handle,
    ClusterManagerInfo clusterManagerInfo,
    PoolInfoStrings poolInfoStrings)
  {
    this();
    this.handle = handle;
    this.clusterManagerInfo = clusterManagerInfo;
    this.poolInfoStrings = poolInfoStrings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SessionRegistrationData(SessionRegistrationData other) {
    if (other.isSetHandle()) {
      this.handle = other.handle;
    }
    if (other.isSetClusterManagerInfo()) {
      this.clusterManagerInfo = new ClusterManagerInfo(other.clusterManagerInfo);
    }
    if (other.isSetPoolInfoStrings()) {
      this.poolInfoStrings = new PoolInfoStrings(other.poolInfoStrings);
    }
  }

  public SessionRegistrationData deepCopy() {
    return new SessionRegistrationData(this);
  }

  @Override
  public void clear() {
    this.handle = null;
    this.clusterManagerInfo = null;
    this.poolInfoStrings = null;
  }

  public String getHandle() {
    return this.handle;
  }

  public SessionRegistrationData setHandle(String handle) {
    this.handle = handle;
    return this;
  }

  public void unsetHandle() {
    this.handle = null;
  }

  /** Returns true if field handle is set (has been assigned a value) and false otherwise */
  public boolean isSetHandle() {
    return this.handle != null;
  }

  public void setHandleIsSet(boolean value) {
    if (!value) {
      this.handle = null;
    }
  }

  public ClusterManagerInfo getClusterManagerInfo() {
    return this.clusterManagerInfo;
  }

  public SessionRegistrationData setClusterManagerInfo(ClusterManagerInfo clusterManagerInfo) {
    this.clusterManagerInfo = clusterManagerInfo;
    return this;
  }

  public void unsetClusterManagerInfo() {
    this.clusterManagerInfo = null;
  }

  /** Returns true if field clusterManagerInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterManagerInfo() {
    return this.clusterManagerInfo != null;
  }

  public void setClusterManagerInfoIsSet(boolean value) {
    if (!value) {
      this.clusterManagerInfo = null;
    }
  }

  public PoolInfoStrings getPoolInfoStrings() {
    return this.poolInfoStrings;
  }

  public SessionRegistrationData setPoolInfoStrings(PoolInfoStrings poolInfoStrings) {
    this.poolInfoStrings = poolInfoStrings;
    return this;
  }

  public void unsetPoolInfoStrings() {
    this.poolInfoStrings = null;
  }

  /** Returns true if field poolInfoStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolInfoStrings() {
    return this.poolInfoStrings != null;
  }

  public void setPoolInfoStringsIsSet(boolean value) {
    if (!value) {
      this.poolInfoStrings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HANDLE:
      if (value == null) {
        unsetHandle();
      } else {
        setHandle((String)value);
      }
      break;

    case CLUSTER_MANAGER_INFO:
      if (value == null) {
        unsetClusterManagerInfo();
      } else {
        setClusterManagerInfo((ClusterManagerInfo)value);
      }
      break;

    case POOL_INFO_STRINGS:
      if (value == null) {
        unsetPoolInfoStrings();
      } else {
        setPoolInfoStrings((PoolInfoStrings)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HANDLE:
      return getHandle();

    case CLUSTER_MANAGER_INFO:
      return getClusterManagerInfo();

    case POOL_INFO_STRINGS:
      return getPoolInfoStrings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HANDLE:
      return isSetHandle();
    case CLUSTER_MANAGER_INFO:
      return isSetClusterManagerInfo();
    case POOL_INFO_STRINGS:
      return isSetPoolInfoStrings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SessionRegistrationData)
      return this.equals((SessionRegistrationData)that);
    return false;
  }

  public boolean equals(SessionRegistrationData that) {
    if (that == null)
      return false;

    boolean this_present_handle = true && this.isSetHandle();
    boolean that_present_handle = true && that.isSetHandle();
    if (this_present_handle || that_present_handle) {
      if (!(this_present_handle && that_present_handle))
        return false;
      if (!this.handle.equals(that.handle))
        return false;
    }

    boolean this_present_clusterManagerInfo = true && this.isSetClusterManagerInfo();
    boolean that_present_clusterManagerInfo = true && that.isSetClusterManagerInfo();
    if (this_present_clusterManagerInfo || that_present_clusterManagerInfo) {
      if (!(this_present_clusterManagerInfo && that_present_clusterManagerInfo))
        return false;
      if (!this.clusterManagerInfo.equals(that.clusterManagerInfo))
        return false;
    }

    boolean this_present_poolInfoStrings = true && this.isSetPoolInfoStrings();
    boolean that_present_poolInfoStrings = true && that.isSetPoolInfoStrings();
    if (this_present_poolInfoStrings || that_present_poolInfoStrings) {
      if (!(this_present_poolInfoStrings && that_present_poolInfoStrings))
        return false;
      if (!this.poolInfoStrings.equals(that.poolInfoStrings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SessionRegistrationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SessionRegistrationData typedOther = (SessionRegistrationData)other;

    lastComparison = Boolean.valueOf(isSetHandle()).compareTo(typedOther.isSetHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, typedOther.handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterManagerInfo()).compareTo(typedOther.isSetClusterManagerInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterManagerInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterManagerInfo, typedOther.clusterManagerInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolInfoStrings()).compareTo(typedOther.isSetPoolInfoStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolInfoStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolInfoStrings, typedOther.poolInfoStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HANDLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.handle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CLUSTER_MANAGER_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.clusterManagerInfo = new ClusterManagerInfo();
            this.clusterManagerInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // POOL_INFO_STRINGS
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.poolInfoStrings = new PoolInfoStrings();
            this.poolInfoStrings.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.handle != null) {
      oprot.writeFieldBegin(HANDLE_FIELD_DESC);
      oprot.writeString(this.handle);
      oprot.writeFieldEnd();
    }
    if (this.clusterManagerInfo != null) {
      oprot.writeFieldBegin(CLUSTER_MANAGER_INFO_FIELD_DESC);
      this.clusterManagerInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.poolInfoStrings != null) {
      oprot.writeFieldBegin(POOL_INFO_STRINGS_FIELD_DESC);
      this.poolInfoStrings.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SessionRegistrationData(");
    boolean first = true;

    sb.append("handle:");
    if (this.handle == null) {
      sb.append("null");
    } else {
      sb.append(this.handle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clusterManagerInfo:");
    if (this.clusterManagerInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterManagerInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("poolInfoStrings:");
    if (this.poolInfoStrings == null) {
      sb.append("null");
    } else {
      sb.append(this.poolInfoStrings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (handle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'handle' was not present! Struct: " + toString());
    }
    if (clusterManagerInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clusterManagerInfo' was not present! Struct: " + toString());
    }
    if (poolInfoStrings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'poolInfoStrings' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

