/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hadoopfs_TYPES_H
#define hadoopfs_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _ThriftHandle__isset {
  _ThriftHandle__isset() : id(false) {}
  bool id;
} _ThriftHandle__isset;

class ThriftHandle {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  ThriftHandle() : id(0) {
  }

  virtual ~ThriftHandle() throw() {}

  int64_t id;

  _ThriftHandle__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  bool operator == (const ThriftHandle & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ThriftHandle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHandle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pathname__isset {
  _Pathname__isset() : pathname(false) {}
  bool pathname;
} _Pathname__isset;

class Pathname {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Pathname() : pathname("") {
  }

  virtual ~Pathname() throw() {}

  std::string pathname;

  _Pathname__isset __isset;

  void __set_pathname(const std::string& val) {
    pathname = val;
  }

  bool operator == (const Pathname & rhs) const
  {
    if (!(pathname == rhs.pathname))
      return false;
    return true;
  }
  bool operator != (const Pathname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pathname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStatus__isset {
  _FileStatus__isset() : path(false), length(false), isdir(false), block_replication(false), blocksize(false), modification_time(false), permission(false), owner(false), group(false) {}
  bool path;
  bool length;
  bool isdir;
  bool block_replication;
  bool blocksize;
  bool modification_time;
  bool permission;
  bool owner;
  bool group;
} _FileStatus__isset;

class FileStatus {
 public:

  static const char* ascii_fingerprint; // = "68FE7242A6727149B291A86FB9570D2B";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0xFE,0x72,0x42,0xA6,0x72,0x71,0x49,0xB2,0x91,0xA8,0x6F,0xB9,0x57,0x0D,0x2B};

  FileStatus() : path(""), length(0), isdir(0), block_replication(0), blocksize(0), modification_time(0), permission(""), owner(""), group("") {
  }

  virtual ~FileStatus() throw() {}

  std::string path;
  int64_t length;
  bool isdir;
  int16_t block_replication;
  int64_t blocksize;
  int64_t modification_time;
  std::string permission;
  std::string owner;
  std::string group;

  _FileStatus__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_length(const int64_t val) {
    length = val;
  }

  void __set_isdir(const bool val) {
    isdir = val;
  }

  void __set_block_replication(const int16_t val) {
    block_replication = val;
  }

  void __set_blocksize(const int64_t val) {
    blocksize = val;
  }

  void __set_modification_time(const int64_t val) {
    modification_time = val;
  }

  void __set_permission(const std::string& val) {
    permission = val;
  }

  void __set_owner(const std::string& val) {
    owner = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const FileStatus & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(isdir == rhs.isdir))
      return false;
    if (!(block_replication == rhs.block_replication))
      return false;
    if (!(blocksize == rhs.blocksize))
      return false;
    if (!(modification_time == rhs.modification_time))
      return false;
    if (!(permission == rhs.permission))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const FileStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockLocation__isset {
  _BlockLocation__isset() : hosts(false), names(false), offset(false), length(false) {}
  bool hosts;
  bool names;
  bool offset;
  bool length;
} _BlockLocation__isset;

class BlockLocation {
 public:

  static const char* ascii_fingerprint; // = "8BF3B16BED96367B21783389BDF8B1C0";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xF3,0xB1,0x6B,0xED,0x96,0x36,0x7B,0x21,0x78,0x33,0x89,0xBD,0xF8,0xB1,0xC0};

  BlockLocation() : offset(0), length(0) {
  }

  virtual ~BlockLocation() throw() {}

  std::vector<std::string>  hosts;
  std::vector<std::string>  names;
  int64_t offset;
  int64_t length;

  _BlockLocation__isset __isset;

  void __set_hosts(const std::vector<std::string> & val) {
    hosts = val;
  }

  void __set_names(const std::vector<std::string> & val) {
    names = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_length(const int64_t val) {
    length = val;
  }

  bool operator == (const BlockLocation & rhs) const
  {
    if (!(hosts == rhs.hosts))
      return false;
    if (!(names == rhs.names))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const BlockLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TBlock__isset {
  _TBlock__isset() : blockId(false), numBytes(false), generationStamp(false) {}
  bool blockId;
  bool numBytes;
  bool generationStamp;
} _TBlock__isset;

class TBlock {
 public:

  static const char* ascii_fingerprint; // = "EA2D65F1E0BB78760205682082304B41";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x2D,0x65,0xF1,0xE0,0xBB,0x78,0x76,0x02,0x05,0x68,0x20,0x82,0x30,0x4B,0x41};

  TBlock() : blockId(0), numBytes(0), generationStamp(0) {
  }

  virtual ~TBlock() throw() {}

  int64_t blockId;
  int64_t numBytes;
  int64_t generationStamp;

  _TBlock__isset __isset;

  void __set_blockId(const int64_t val) {
    blockId = val;
  }

  void __set_numBytes(const int64_t val) {
    numBytes = val;
  }

  void __set_generationStamp(const int64_t val) {
    generationStamp = val;
  }

  bool operator == (const TBlock & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    if (!(numBytes == rhs.numBytes))
      return false;
    if (!(generationStamp == rhs.generationStamp))
      return false;
    return true;
  }
  bool operator != (const TBlock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBlock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDatanodeID__isset {
  _TDatanodeID__isset() : name(false) {}
  bool name;
} _TDatanodeID__isset;

class TDatanodeID {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TDatanodeID() : name("") {
  }

  virtual ~TDatanodeID() throw() {}

  std::string name;

  _TDatanodeID__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const TDatanodeID & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const TDatanodeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDatanodeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TLocatedBlock__isset {
  _TLocatedBlock__isset() : block(false), namespaceId(false), dataTransferVersion(false), location(false) {}
  bool block;
  bool namespaceId;
  bool dataTransferVersion;
  bool location;
} _TLocatedBlock__isset;

class TLocatedBlock {
 public:

  static const char* ascii_fingerprint; // = "0E6FCDC9A70E2B8DA64F3D5FD23D3D55";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x6F,0xCD,0xC9,0xA7,0x0E,0x2B,0x8D,0xA6,0x4F,0x3D,0x5F,0xD2,0x3D,0x3D,0x55};

  TLocatedBlock() : namespaceId(0), dataTransferVersion(0) {
  }

  virtual ~TLocatedBlock() throw() {}

  TBlock block;
  int32_t namespaceId;
  int32_t dataTransferVersion;
  std::vector<TDatanodeID>  location;

  _TLocatedBlock__isset __isset;

  void __set_block(const TBlock& val) {
    block = val;
  }

  void __set_namespaceId(const int32_t val) {
    namespaceId = val;
  }

  void __set_dataTransferVersion(const int32_t val) {
    dataTransferVersion = val;
  }

  void __set_location(const std::vector<TDatanodeID> & val) {
    location = val;
  }

  bool operator == (const TLocatedBlock & rhs) const
  {
    if (!(block == rhs.block))
      return false;
    if (!(namespaceId == rhs.namespaceId))
      return false;
    if (!(dataTransferVersion == rhs.dataTransferVersion))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const TLocatedBlock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLocatedBlock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MalformedInputException__isset {
  _MalformedInputException__isset() : message(false) {}
  bool message;
} _MalformedInputException__isset;

class MalformedInputException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MalformedInputException() : message("") {
  }

  virtual ~MalformedInputException() throw() {}

  std::string message;

  _MalformedInputException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const MalformedInputException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MalformedInputException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MalformedInputException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftIOException__isset {
  _ThriftIOException__isset() : message(false) {}
  bool message;
} _ThriftIOException__isset;

class ThriftIOException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ThriftIOException() : message("") {
  }

  virtual ~ThriftIOException() throw() {}

  std::string message;

  _ThriftIOException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ThriftIOException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ThriftIOException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftIOException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
