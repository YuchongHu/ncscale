/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ThriftHadoopFileSystem_H
#define ThriftHadoopFileSystem_H

#include <TProcessor.h>
#include "hadoopfs_types.h"



class ThriftHadoopFileSystemIf {
 public:
  virtual ~ThriftHadoopFileSystemIf() {}
  virtual void setInactivityTimeoutPeriod(const int64_t periodInSeconds) = 0;
  virtual void shutdown(const int32_t status) = 0;
  virtual void create(ThriftHandle& _return, const Pathname& path) = 0;
  virtual void createFile(ThriftHandle& _return, const Pathname& path, const int16_t mode, const bool overwrite, const int32_t bufferSize, const int16_t block_replication, const int64_t blocksize) = 0;
  virtual void open(ThriftHandle& _return, const Pathname& path) = 0;
  virtual void append(ThriftHandle& _return, const Pathname& path) = 0;
  virtual bool write(const ThriftHandle& handle, const std::string& data) = 0;
  virtual void read(std::string& _return, const ThriftHandle& handle, const int64_t offset, const int32_t size) = 0;
  virtual bool close(const ThriftHandle& out) = 0;
  virtual bool rm(const Pathname& path, const bool recursive) = 0;
  virtual bool rename(const Pathname& path, const Pathname& dest) = 0;
  virtual bool mkdirs(const Pathname& path) = 0;
  virtual bool exists(const Pathname& path) = 0;
  virtual void stat(FileStatus& _return, const Pathname& path) = 0;
  virtual void listStatus(std::vector<FileStatus> & _return, const Pathname& path) = 0;
  virtual void chmod(const Pathname& path, const int16_t mode) = 0;
  virtual void chown(const Pathname& path, const std::string& owner, const std::string& group) = 0;
  virtual void setReplication(const Pathname& path, const int16_t replication) = 0;
  virtual void getFileBlockLocations(std::vector<BlockLocation> & _return, const Pathname& path, const int64_t start, const int64_t length) = 0;
  virtual bool hardLink(const Pathname& src, const Pathname& dest) = 0;
  virtual void concat(const Pathname& target, const std::vector<Pathname> & srcs, const bool restricted) = 0;
  virtual void reportBadBlocks(const std::vector<TLocatedBlock> & blocks) = 0;
  virtual int32_t getDataTransferProtocolVersion() = 0;
  virtual void renewLease(const std::string& clientName) = 0;
  virtual void recoverLease(const Pathname& path, const std::string& clientName) = 0;
  virtual void closeRecoverLease(const Pathname& path, const std::string& clientName, const bool discardLastBlock) = 0;
  virtual void abandonBlock(const TBlock& block, const Pathname& pathname, const std::string& clientName) = 0;
  virtual void abandonFile(const Pathname& pathname, const std::string& clientName) = 0;
  virtual void addBlock(TLocatedBlock& _return, const Pathname& pathname, const std::string& clientName, const int64_t startOffset, const TBlock& lastBlock, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes) = 0;
  virtual void addFirstBlock(TLocatedBlock& _return, const Pathname& pathname, const std::string& clientName, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes) = 0;
  virtual bool complete(const Pathname& pathname, const std::string& clientName, const int64_t fileLen, const TBlock& lastBlock) = 0;
};

class ThriftHadoopFileSystemNull : virtual public ThriftHadoopFileSystemIf {
 public:
  virtual ~ThriftHadoopFileSystemNull() {}
  void setInactivityTimeoutPeriod(const int64_t /* periodInSeconds */) {
    return;
  }
  void shutdown(const int32_t /* status */) {
    return;
  }
  void create(ThriftHandle& /* _return */, const Pathname& /* path */) {
    return;
  }
  void createFile(ThriftHandle& /* _return */, const Pathname& /* path */, const int16_t /* mode */, const bool /* overwrite */, const int32_t /* bufferSize */, const int16_t /* block_replication */, const int64_t /* blocksize */) {
    return;
  }
  void open(ThriftHandle& /* _return */, const Pathname& /* path */) {
    return;
  }
  void append(ThriftHandle& /* _return */, const Pathname& /* path */) {
    return;
  }
  bool write(const ThriftHandle& /* handle */, const std::string& /* data */) {
    bool _return = false;
    return _return;
  }
  void read(std::string& /* _return */, const ThriftHandle& /* handle */, const int64_t /* offset */, const int32_t /* size */) {
    return;
  }
  bool close(const ThriftHandle& /* out */) {
    bool _return = false;
    return _return;
  }
  bool rm(const Pathname& /* path */, const bool /* recursive */) {
    bool _return = false;
    return _return;
  }
  bool rename(const Pathname& /* path */, const Pathname& /* dest */) {
    bool _return = false;
    return _return;
  }
  bool mkdirs(const Pathname& /* path */) {
    bool _return = false;
    return _return;
  }
  bool exists(const Pathname& /* path */) {
    bool _return = false;
    return _return;
  }
  void stat(FileStatus& /* _return */, const Pathname& /* path */) {
    return;
  }
  void listStatus(std::vector<FileStatus> & /* _return */, const Pathname& /* path */) {
    return;
  }
  void chmod(const Pathname& /* path */, const int16_t /* mode */) {
    return;
  }
  void chown(const Pathname& /* path */, const std::string& /* owner */, const std::string& /* group */) {
    return;
  }
  void setReplication(const Pathname& /* path */, const int16_t /* replication */) {
    return;
  }
  void getFileBlockLocations(std::vector<BlockLocation> & /* _return */, const Pathname& /* path */, const int64_t /* start */, const int64_t /* length */) {
    return;
  }
  bool hardLink(const Pathname& /* src */, const Pathname& /* dest */) {
    bool _return = false;
    return _return;
  }
  void concat(const Pathname& /* target */, const std::vector<Pathname> & /* srcs */, const bool /* restricted */) {
    return;
  }
  void reportBadBlocks(const std::vector<TLocatedBlock> & /* blocks */) {
    return;
  }
  int32_t getDataTransferProtocolVersion() {
    int32_t _return = 0;
    return _return;
  }
  void renewLease(const std::string& /* clientName */) {
    return;
  }
  void recoverLease(const Pathname& /* path */, const std::string& /* clientName */) {
    return;
  }
  void closeRecoverLease(const Pathname& /* path */, const std::string& /* clientName */, const bool /* discardLastBlock */) {
    return;
  }
  void abandonBlock(const TBlock& /* block */, const Pathname& /* pathname */, const std::string& /* clientName */) {
    return;
  }
  void abandonFile(const Pathname& /* pathname */, const std::string& /* clientName */) {
    return;
  }
  void addBlock(TLocatedBlock& /* _return */, const Pathname& /* pathname */, const std::string& /* clientName */, const int64_t /* startOffset */, const TBlock& /* lastBlock */, const std::vector<TDatanodeID> & /* excludedNodes */, const std::vector<TDatanodeID> & /* favouredNodes */) {
    return;
  }
  void addFirstBlock(TLocatedBlock& /* _return */, const Pathname& /* pathname */, const std::string& /* clientName */, const std::vector<TDatanodeID> & /* excludedNodes */, const std::vector<TDatanodeID> & /* favouredNodes */) {
    return;
  }
  bool complete(const Pathname& /* pathname */, const std::string& /* clientName */, const int64_t /* fileLen */, const TBlock& /* lastBlock */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args__isset {
  _ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args__isset() : periodInSeconds(false) {}
  bool periodInSeconds;
} _ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args__isset;

class ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args {
 public:

  ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args() : periodInSeconds(0) {
  }

  virtual ~ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args() throw() {}

  int64_t periodInSeconds;

  _ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args__isset __isset;

  void __set_periodInSeconds(const int64_t val) {
    periodInSeconds = val;
  }

  bool operator == (const ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args & rhs) const
  {
    if (!(periodInSeconds == rhs.periodInSeconds))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_setInactivityTimeoutPeriod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_setInactivityTimeoutPeriod_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_setInactivityTimeoutPeriod_pargs() throw() {}

  const int64_t* periodInSeconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_setInactivityTimeoutPeriod_result {
 public:

  ThriftHadoopFileSystem_setInactivityTimeoutPeriod_result() {
  }

  virtual ~ThriftHadoopFileSystem_setInactivityTimeoutPeriod_result() throw() {}


  bool operator == (const ThriftHadoopFileSystem_setInactivityTimeoutPeriod_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_setInactivityTimeoutPeriod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_setInactivityTimeoutPeriod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_setInactivityTimeoutPeriod_presult {
 public:


  virtual ~ThriftHadoopFileSystem_setInactivityTimeoutPeriod_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_shutdown_args__isset {
  _ThriftHadoopFileSystem_shutdown_args__isset() : status(false) {}
  bool status;
} _ThriftHadoopFileSystem_shutdown_args__isset;

class ThriftHadoopFileSystem_shutdown_args {
 public:

  ThriftHadoopFileSystem_shutdown_args() : status(0) {
  }

  virtual ~ThriftHadoopFileSystem_shutdown_args() throw() {}

  int32_t status;

  _ThriftHadoopFileSystem_shutdown_args__isset __isset;

  void __set_status(const int32_t val) {
    status = val;
  }

  bool operator == (const ThriftHadoopFileSystem_shutdown_args & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_shutdown_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_shutdown_pargs() throw() {}

  const int32_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_shutdown_result {
 public:

  ThriftHadoopFileSystem_shutdown_result() {
  }

  virtual ~ThriftHadoopFileSystem_shutdown_result() throw() {}


  bool operator == (const ThriftHadoopFileSystem_shutdown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_shutdown_presult {
 public:


  virtual ~ThriftHadoopFileSystem_shutdown_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_create_args__isset {
  _ThriftHadoopFileSystem_create_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_create_args__isset;

class ThriftHadoopFileSystem_create_args {
 public:

  ThriftHadoopFileSystem_create_args() {
  }

  virtual ~ThriftHadoopFileSystem_create_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_create_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_create_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_create_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_create_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_create_result__isset {
  _ThriftHadoopFileSystem_create_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_create_result__isset;

class ThriftHadoopFileSystem_create_result {
 public:

  ThriftHadoopFileSystem_create_result() {
  }

  virtual ~ThriftHadoopFileSystem_create_result() throw() {}

  ThriftHandle success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_create_result__isset __isset;

  void __set_success(const ThriftHandle& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_create_presult__isset {
  _ThriftHadoopFileSystem_create_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_create_presult__isset;

class ThriftHadoopFileSystem_create_presult {
 public:


  virtual ~ThriftHadoopFileSystem_create_presult() throw() {}

  ThriftHandle* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_createFile_args__isset {
  _ThriftHadoopFileSystem_createFile_args__isset() : path(false), mode(false), overwrite(false), bufferSize(false), block_replication(false), blocksize(false) {}
  bool path;
  bool mode;
  bool overwrite;
  bool bufferSize;
  bool block_replication;
  bool blocksize;
} _ThriftHadoopFileSystem_createFile_args__isset;

class ThriftHadoopFileSystem_createFile_args {
 public:

  ThriftHadoopFileSystem_createFile_args() : mode(0), overwrite(0), bufferSize(0), block_replication(0), blocksize(0) {
  }

  virtual ~ThriftHadoopFileSystem_createFile_args() throw() {}

  Pathname path;
  int16_t mode;
  bool overwrite;
  int32_t bufferSize;
  int16_t block_replication;
  int64_t blocksize;

  _ThriftHadoopFileSystem_createFile_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_mode(const int16_t val) {
    mode = val;
  }

  void __set_overwrite(const bool val) {
    overwrite = val;
  }

  void __set_bufferSize(const int32_t val) {
    bufferSize = val;
  }

  void __set_block_replication(const int16_t val) {
    block_replication = val;
  }

  void __set_blocksize(const int64_t val) {
    blocksize = val;
  }

  bool operator == (const ThriftHadoopFileSystem_createFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(overwrite == rhs.overwrite))
      return false;
    if (!(bufferSize == rhs.bufferSize))
      return false;
    if (!(block_replication == rhs.block_replication))
      return false;
    if (!(blocksize == rhs.blocksize))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_createFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_createFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_createFile_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_createFile_pargs() throw() {}

  const Pathname* path;
  const int16_t* mode;
  const bool* overwrite;
  const int32_t* bufferSize;
  const int16_t* block_replication;
  const int64_t* blocksize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_createFile_result__isset {
  _ThriftHadoopFileSystem_createFile_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_createFile_result__isset;

class ThriftHadoopFileSystem_createFile_result {
 public:

  ThriftHadoopFileSystem_createFile_result() {
  }

  virtual ~ThriftHadoopFileSystem_createFile_result() throw() {}

  ThriftHandle success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_createFile_result__isset __isset;

  void __set_success(const ThriftHandle& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_createFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_createFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_createFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_createFile_presult__isset {
  _ThriftHadoopFileSystem_createFile_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_createFile_presult__isset;

class ThriftHadoopFileSystem_createFile_presult {
 public:


  virtual ~ThriftHadoopFileSystem_createFile_presult() throw() {}

  ThriftHandle* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_createFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_open_args__isset {
  _ThriftHadoopFileSystem_open_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_open_args__isset;

class ThriftHadoopFileSystem_open_args {
 public:

  ThriftHadoopFileSystem_open_args() {
  }

  virtual ~ThriftHadoopFileSystem_open_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_open_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_open_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_open_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_open_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_open_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_open_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_open_result__isset {
  _ThriftHadoopFileSystem_open_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_open_result__isset;

class ThriftHadoopFileSystem_open_result {
 public:

  ThriftHadoopFileSystem_open_result() {
  }

  virtual ~ThriftHadoopFileSystem_open_result() throw() {}

  ThriftHandle success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_open_result__isset __isset;

  void __set_success(const ThriftHandle& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_open_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_open_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_open_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_open_presult__isset {
  _ThriftHadoopFileSystem_open_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_open_presult__isset;

class ThriftHadoopFileSystem_open_presult {
 public:


  virtual ~ThriftHadoopFileSystem_open_presult() throw() {}

  ThriftHandle* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_open_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_append_args__isset {
  _ThriftHadoopFileSystem_append_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_append_args__isset;

class ThriftHadoopFileSystem_append_args {
 public:

  ThriftHadoopFileSystem_append_args() {
  }

  virtual ~ThriftHadoopFileSystem_append_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_append_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_append_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_append_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_append_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_append_result__isset {
  _ThriftHadoopFileSystem_append_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_append_result__isset;

class ThriftHadoopFileSystem_append_result {
 public:

  ThriftHadoopFileSystem_append_result() {
  }

  virtual ~ThriftHadoopFileSystem_append_result() throw() {}

  ThriftHandle success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_append_result__isset __isset;

  void __set_success(const ThriftHandle& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_append_presult__isset {
  _ThriftHadoopFileSystem_append_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_append_presult__isset;

class ThriftHadoopFileSystem_append_presult {
 public:


  virtual ~ThriftHadoopFileSystem_append_presult() throw() {}

  ThriftHandle* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_write_args__isset {
  _ThriftHadoopFileSystem_write_args__isset() : handle(false), data(false) {}
  bool handle;
  bool data;
} _ThriftHadoopFileSystem_write_args__isset;

class ThriftHadoopFileSystem_write_args {
 public:

  ThriftHadoopFileSystem_write_args() : data("") {
  }

  virtual ~ThriftHadoopFileSystem_write_args() throw() {}

  ThriftHandle handle;
  std::string data;

  _ThriftHadoopFileSystem_write_args__isset __isset;

  void __set_handle(const ThriftHandle& val) {
    handle = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const ThriftHadoopFileSystem_write_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_write_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_write_pargs() throw() {}

  const ThriftHandle* handle;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_write_result__isset {
  _ThriftHadoopFileSystem_write_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_write_result__isset;

class ThriftHadoopFileSystem_write_result {
 public:

  ThriftHadoopFileSystem_write_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_write_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_write_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_write_presult__isset {
  _ThriftHadoopFileSystem_write_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_write_presult__isset;

class ThriftHadoopFileSystem_write_presult {
 public:


  virtual ~ThriftHadoopFileSystem_write_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_read_args__isset {
  _ThriftHadoopFileSystem_read_args__isset() : handle(false), offset(false), size(false) {}
  bool handle;
  bool offset;
  bool size;
} _ThriftHadoopFileSystem_read_args__isset;

class ThriftHadoopFileSystem_read_args {
 public:

  ThriftHadoopFileSystem_read_args() : offset(0), size(0) {
  }

  virtual ~ThriftHadoopFileSystem_read_args() throw() {}

  ThriftHandle handle;
  int64_t offset;
  int32_t size;

  _ThriftHadoopFileSystem_read_args__isset __isset;

  void __set_handle(const ThriftHandle& val) {
    handle = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const ThriftHadoopFileSystem_read_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_read_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_read_pargs() throw() {}

  const ThriftHandle* handle;
  const int64_t* offset;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_read_result__isset {
  _ThriftHadoopFileSystem_read_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_read_result__isset;

class ThriftHadoopFileSystem_read_result {
 public:

  ThriftHadoopFileSystem_read_result() : success("") {
  }

  virtual ~ThriftHadoopFileSystem_read_result() throw() {}

  std::string success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_read_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_read_presult__isset {
  _ThriftHadoopFileSystem_read_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_read_presult__isset;

class ThriftHadoopFileSystem_read_presult {
 public:


  virtual ~ThriftHadoopFileSystem_read_presult() throw() {}

  std::string* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_close_args__isset {
  _ThriftHadoopFileSystem_close_args__isset() : out(false) {}
  bool out;
} _ThriftHadoopFileSystem_close_args__isset;

class ThriftHadoopFileSystem_close_args {
 public:

  ThriftHadoopFileSystem_close_args() {
  }

  virtual ~ThriftHadoopFileSystem_close_args() throw() {}

  ThriftHandle out;

  _ThriftHadoopFileSystem_close_args__isset __isset;

  void __set_out(const ThriftHandle& val) {
    out = val;
  }

  bool operator == (const ThriftHadoopFileSystem_close_args & rhs) const
  {
    if (!(out == rhs.out))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_close_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_close_pargs() throw() {}

  const ThriftHandle* out;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_close_result__isset {
  _ThriftHadoopFileSystem_close_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_close_result__isset;

class ThriftHadoopFileSystem_close_result {
 public:

  ThriftHadoopFileSystem_close_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_close_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_close_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_close_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_close_presult__isset {
  _ThriftHadoopFileSystem_close_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_close_presult__isset;

class ThriftHadoopFileSystem_close_presult {
 public:


  virtual ~ThriftHadoopFileSystem_close_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_rm_args__isset {
  _ThriftHadoopFileSystem_rm_args__isset() : path(false), recursive(false) {}
  bool path;
  bool recursive;
} _ThriftHadoopFileSystem_rm_args__isset;

class ThriftHadoopFileSystem_rm_args {
 public:

  ThriftHadoopFileSystem_rm_args() : recursive(0) {
  }

  virtual ~ThriftHadoopFileSystem_rm_args() throw() {}

  Pathname path;
  bool recursive;

  _ThriftHadoopFileSystem_rm_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_recursive(const bool val) {
    recursive = val;
  }

  bool operator == (const ThriftHadoopFileSystem_rm_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(recursive == rhs.recursive))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_rm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_rm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_rm_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_rm_pargs() throw() {}

  const Pathname* path;
  const bool* recursive;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_rm_result__isset {
  _ThriftHadoopFileSystem_rm_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_rm_result__isset;

class ThriftHadoopFileSystem_rm_result {
 public:

  ThriftHadoopFileSystem_rm_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_rm_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_rm_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_rm_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_rm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_rm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_rm_presult__isset {
  _ThriftHadoopFileSystem_rm_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_rm_presult__isset;

class ThriftHadoopFileSystem_rm_presult {
 public:


  virtual ~ThriftHadoopFileSystem_rm_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_rm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_rename_args__isset {
  _ThriftHadoopFileSystem_rename_args__isset() : path(false), dest(false) {}
  bool path;
  bool dest;
} _ThriftHadoopFileSystem_rename_args__isset;

class ThriftHadoopFileSystem_rename_args {
 public:

  ThriftHadoopFileSystem_rename_args() {
  }

  virtual ~ThriftHadoopFileSystem_rename_args() throw() {}

  Pathname path;
  Pathname dest;

  _ThriftHadoopFileSystem_rename_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_dest(const Pathname& val) {
    dest = val;
  }

  bool operator == (const ThriftHadoopFileSystem_rename_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(dest == rhs.dest))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_rename_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_rename_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_rename_pargs() throw() {}

  const Pathname* path;
  const Pathname* dest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_rename_result__isset {
  _ThriftHadoopFileSystem_rename_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_rename_result__isset;

class ThriftHadoopFileSystem_rename_result {
 public:

  ThriftHadoopFileSystem_rename_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_rename_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_rename_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_rename_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_rename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_rename_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_rename_presult__isset {
  _ThriftHadoopFileSystem_rename_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_rename_presult__isset;

class ThriftHadoopFileSystem_rename_presult {
 public:


  virtual ~ThriftHadoopFileSystem_rename_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_rename_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_mkdirs_args__isset {
  _ThriftHadoopFileSystem_mkdirs_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_mkdirs_args__isset;

class ThriftHadoopFileSystem_mkdirs_args {
 public:

  ThriftHadoopFileSystem_mkdirs_args() {
  }

  virtual ~ThriftHadoopFileSystem_mkdirs_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_mkdirs_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_mkdirs_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_mkdirs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_mkdirs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_mkdirs_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_mkdirs_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_mkdirs_result__isset {
  _ThriftHadoopFileSystem_mkdirs_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_mkdirs_result__isset;

class ThriftHadoopFileSystem_mkdirs_result {
 public:

  ThriftHadoopFileSystem_mkdirs_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_mkdirs_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_mkdirs_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_mkdirs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_mkdirs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_mkdirs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_mkdirs_presult__isset {
  _ThriftHadoopFileSystem_mkdirs_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_mkdirs_presult__isset;

class ThriftHadoopFileSystem_mkdirs_presult {
 public:


  virtual ~ThriftHadoopFileSystem_mkdirs_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_mkdirs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_exists_args__isset {
  _ThriftHadoopFileSystem_exists_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_exists_args__isset;

class ThriftHadoopFileSystem_exists_args {
 public:

  ThriftHadoopFileSystem_exists_args() {
  }

  virtual ~ThriftHadoopFileSystem_exists_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_exists_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_exists_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_exists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_exists_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_exists_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_exists_result__isset {
  _ThriftHadoopFileSystem_exists_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_exists_result__isset;

class ThriftHadoopFileSystem_exists_result {
 public:

  ThriftHadoopFileSystem_exists_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_exists_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_exists_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_exists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_exists_presult__isset {
  _ThriftHadoopFileSystem_exists_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_exists_presult__isset;

class ThriftHadoopFileSystem_exists_presult {
 public:


  virtual ~ThriftHadoopFileSystem_exists_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_exists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_stat_args__isset {
  _ThriftHadoopFileSystem_stat_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_stat_args__isset;

class ThriftHadoopFileSystem_stat_args {
 public:

  ThriftHadoopFileSystem_stat_args() {
  }

  virtual ~ThriftHadoopFileSystem_stat_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_stat_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_stat_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_stat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_stat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_stat_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_stat_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_stat_result__isset {
  _ThriftHadoopFileSystem_stat_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_stat_result__isset;

class ThriftHadoopFileSystem_stat_result {
 public:

  ThriftHadoopFileSystem_stat_result() {
  }

  virtual ~ThriftHadoopFileSystem_stat_result() throw() {}

  FileStatus success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_stat_result__isset __isset;

  void __set_success(const FileStatus& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_stat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_stat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_stat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_stat_presult__isset {
  _ThriftHadoopFileSystem_stat_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_stat_presult__isset;

class ThriftHadoopFileSystem_stat_presult {
 public:


  virtual ~ThriftHadoopFileSystem_stat_presult() throw() {}

  FileStatus* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_stat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_listStatus_args__isset {
  _ThriftHadoopFileSystem_listStatus_args__isset() : path(false) {}
  bool path;
} _ThriftHadoopFileSystem_listStatus_args__isset;

class ThriftHadoopFileSystem_listStatus_args {
 public:

  ThriftHadoopFileSystem_listStatus_args() {
  }

  virtual ~ThriftHadoopFileSystem_listStatus_args() throw() {}

  Pathname path;

  _ThriftHadoopFileSystem_listStatus_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  bool operator == (const ThriftHadoopFileSystem_listStatus_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_listStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_listStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_listStatus_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_listStatus_pargs() throw() {}

  const Pathname* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_listStatus_result__isset {
  _ThriftHadoopFileSystem_listStatus_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_listStatus_result__isset;

class ThriftHadoopFileSystem_listStatus_result {
 public:

  ThriftHadoopFileSystem_listStatus_result() {
  }

  virtual ~ThriftHadoopFileSystem_listStatus_result() throw() {}

  std::vector<FileStatus>  success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_listStatus_result__isset __isset;

  void __set_success(const std::vector<FileStatus> & val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_listStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_listStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_listStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_listStatus_presult__isset {
  _ThriftHadoopFileSystem_listStatus_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_listStatus_presult__isset;

class ThriftHadoopFileSystem_listStatus_presult {
 public:


  virtual ~ThriftHadoopFileSystem_listStatus_presult() throw() {}

  std::vector<FileStatus> * success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_listStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_chmod_args__isset {
  _ThriftHadoopFileSystem_chmod_args__isset() : path(false), mode(false) {}
  bool path;
  bool mode;
} _ThriftHadoopFileSystem_chmod_args__isset;

class ThriftHadoopFileSystem_chmod_args {
 public:

  ThriftHadoopFileSystem_chmod_args() : mode(0) {
  }

  virtual ~ThriftHadoopFileSystem_chmod_args() throw() {}

  Pathname path;
  int16_t mode;

  _ThriftHadoopFileSystem_chmod_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_mode(const int16_t val) {
    mode = val;
  }

  bool operator == (const ThriftHadoopFileSystem_chmod_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_chmod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_chmod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_chmod_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_chmod_pargs() throw() {}

  const Pathname* path;
  const int16_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_chmod_result__isset {
  _ThriftHadoopFileSystem_chmod_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_chmod_result__isset;

class ThriftHadoopFileSystem_chmod_result {
 public:

  ThriftHadoopFileSystem_chmod_result() {
  }

  virtual ~ThriftHadoopFileSystem_chmod_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_chmod_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_chmod_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_chmod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_chmod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_chmod_presult__isset {
  _ThriftHadoopFileSystem_chmod_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_chmod_presult__isset;

class ThriftHadoopFileSystem_chmod_presult {
 public:


  virtual ~ThriftHadoopFileSystem_chmod_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_chmod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_chown_args__isset {
  _ThriftHadoopFileSystem_chown_args__isset() : path(false), owner(false), group(false) {}
  bool path;
  bool owner;
  bool group;
} _ThriftHadoopFileSystem_chown_args__isset;

class ThriftHadoopFileSystem_chown_args {
 public:

  ThriftHadoopFileSystem_chown_args() : owner(""), group("") {
  }

  virtual ~ThriftHadoopFileSystem_chown_args() throw() {}

  Pathname path;
  std::string owner;
  std::string group;

  _ThriftHadoopFileSystem_chown_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_owner(const std::string& val) {
    owner = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftHadoopFileSystem_chown_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_chown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_chown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_chown_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_chown_pargs() throw() {}

  const Pathname* path;
  const std::string* owner;
  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_chown_result__isset {
  _ThriftHadoopFileSystem_chown_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_chown_result__isset;

class ThriftHadoopFileSystem_chown_result {
 public:

  ThriftHadoopFileSystem_chown_result() {
  }

  virtual ~ThriftHadoopFileSystem_chown_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_chown_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_chown_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_chown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_chown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_chown_presult__isset {
  _ThriftHadoopFileSystem_chown_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_chown_presult__isset;

class ThriftHadoopFileSystem_chown_presult {
 public:


  virtual ~ThriftHadoopFileSystem_chown_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_chown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_setReplication_args__isset {
  _ThriftHadoopFileSystem_setReplication_args__isset() : path(false), replication(false) {}
  bool path;
  bool replication;
} _ThriftHadoopFileSystem_setReplication_args__isset;

class ThriftHadoopFileSystem_setReplication_args {
 public:

  ThriftHadoopFileSystem_setReplication_args() : replication(0) {
  }

  virtual ~ThriftHadoopFileSystem_setReplication_args() throw() {}

  Pathname path;
  int16_t replication;

  _ThriftHadoopFileSystem_setReplication_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_replication(const int16_t val) {
    replication = val;
  }

  bool operator == (const ThriftHadoopFileSystem_setReplication_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(replication == rhs.replication))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_setReplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_setReplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_setReplication_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_setReplication_pargs() throw() {}

  const Pathname* path;
  const int16_t* replication;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_setReplication_result__isset {
  _ThriftHadoopFileSystem_setReplication_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_setReplication_result__isset;

class ThriftHadoopFileSystem_setReplication_result {
 public:

  ThriftHadoopFileSystem_setReplication_result() {
  }

  virtual ~ThriftHadoopFileSystem_setReplication_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_setReplication_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_setReplication_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_setReplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_setReplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_setReplication_presult__isset {
  _ThriftHadoopFileSystem_setReplication_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_setReplication_presult__isset;

class ThriftHadoopFileSystem_setReplication_presult {
 public:


  virtual ~ThriftHadoopFileSystem_setReplication_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_setReplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_getFileBlockLocations_args__isset {
  _ThriftHadoopFileSystem_getFileBlockLocations_args__isset() : path(false), start(false), length(false) {}
  bool path;
  bool start;
  bool length;
} _ThriftHadoopFileSystem_getFileBlockLocations_args__isset;

class ThriftHadoopFileSystem_getFileBlockLocations_args {
 public:

  ThriftHadoopFileSystem_getFileBlockLocations_args() : start(0), length(0) {
  }

  virtual ~ThriftHadoopFileSystem_getFileBlockLocations_args() throw() {}

  Pathname path;
  int64_t start;
  int64_t length;

  _ThriftHadoopFileSystem_getFileBlockLocations_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_length(const int64_t val) {
    length = val;
  }

  bool operator == (const ThriftHadoopFileSystem_getFileBlockLocations_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_getFileBlockLocations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_getFileBlockLocations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_getFileBlockLocations_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_getFileBlockLocations_pargs() throw() {}

  const Pathname* path;
  const int64_t* start;
  const int64_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_getFileBlockLocations_result__isset {
  _ThriftHadoopFileSystem_getFileBlockLocations_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_getFileBlockLocations_result__isset;

class ThriftHadoopFileSystem_getFileBlockLocations_result {
 public:

  ThriftHadoopFileSystem_getFileBlockLocations_result() {
  }

  virtual ~ThriftHadoopFileSystem_getFileBlockLocations_result() throw() {}

  std::vector<BlockLocation>  success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_getFileBlockLocations_result__isset __isset;

  void __set_success(const std::vector<BlockLocation> & val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_getFileBlockLocations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_getFileBlockLocations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_getFileBlockLocations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_getFileBlockLocations_presult__isset {
  _ThriftHadoopFileSystem_getFileBlockLocations_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_getFileBlockLocations_presult__isset;

class ThriftHadoopFileSystem_getFileBlockLocations_presult {
 public:


  virtual ~ThriftHadoopFileSystem_getFileBlockLocations_presult() throw() {}

  std::vector<BlockLocation> * success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_getFileBlockLocations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_hardLink_args__isset {
  _ThriftHadoopFileSystem_hardLink_args__isset() : src(false), dest(false) {}
  bool src;
  bool dest;
} _ThriftHadoopFileSystem_hardLink_args__isset;

class ThriftHadoopFileSystem_hardLink_args {
 public:

  ThriftHadoopFileSystem_hardLink_args() {
  }

  virtual ~ThriftHadoopFileSystem_hardLink_args() throw() {}

  Pathname src;
  Pathname dest;

  _ThriftHadoopFileSystem_hardLink_args__isset __isset;

  void __set_src(const Pathname& val) {
    src = val;
  }

  void __set_dest(const Pathname& val) {
    dest = val;
  }

  bool operator == (const ThriftHadoopFileSystem_hardLink_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(dest == rhs.dest))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_hardLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_hardLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_hardLink_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_hardLink_pargs() throw() {}

  const Pathname* src;
  const Pathname* dest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_hardLink_result__isset {
  _ThriftHadoopFileSystem_hardLink_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_hardLink_result__isset;

class ThriftHadoopFileSystem_hardLink_result {
 public:

  ThriftHadoopFileSystem_hardLink_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_hardLink_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_hardLink_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_hardLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_hardLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_hardLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_hardLink_presult__isset {
  _ThriftHadoopFileSystem_hardLink_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_hardLink_presult__isset;

class ThriftHadoopFileSystem_hardLink_presult {
 public:


  virtual ~ThriftHadoopFileSystem_hardLink_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_hardLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_concat_args__isset {
  _ThriftHadoopFileSystem_concat_args__isset() : target(false), srcs(false), restricted(false) {}
  bool target;
  bool srcs;
  bool restricted;
} _ThriftHadoopFileSystem_concat_args__isset;

class ThriftHadoopFileSystem_concat_args {
 public:

  ThriftHadoopFileSystem_concat_args() : restricted(0) {
  }

  virtual ~ThriftHadoopFileSystem_concat_args() throw() {}

  Pathname target;
  std::vector<Pathname>  srcs;
  bool restricted;

  _ThriftHadoopFileSystem_concat_args__isset __isset;

  void __set_target(const Pathname& val) {
    target = val;
  }

  void __set_srcs(const std::vector<Pathname> & val) {
    srcs = val;
  }

  void __set_restricted(const bool val) {
    restricted = val;
  }

  bool operator == (const ThriftHadoopFileSystem_concat_args & rhs) const
  {
    if (!(target == rhs.target))
      return false;
    if (!(srcs == rhs.srcs))
      return false;
    if (!(restricted == rhs.restricted))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_concat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_concat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_concat_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_concat_pargs() throw() {}

  const Pathname* target;
  const std::vector<Pathname> * srcs;
  const bool* restricted;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_concat_result__isset {
  _ThriftHadoopFileSystem_concat_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_concat_result__isset;

class ThriftHadoopFileSystem_concat_result {
 public:

  ThriftHadoopFileSystem_concat_result() {
  }

  virtual ~ThriftHadoopFileSystem_concat_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_concat_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_concat_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_concat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_concat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_concat_presult__isset {
  _ThriftHadoopFileSystem_concat_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_concat_presult__isset;

class ThriftHadoopFileSystem_concat_presult {
 public:


  virtual ~ThriftHadoopFileSystem_concat_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_concat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_reportBadBlocks_args__isset {
  _ThriftHadoopFileSystem_reportBadBlocks_args__isset() : blocks(false) {}
  bool blocks;
} _ThriftHadoopFileSystem_reportBadBlocks_args__isset;

class ThriftHadoopFileSystem_reportBadBlocks_args {
 public:

  ThriftHadoopFileSystem_reportBadBlocks_args() {
  }

  virtual ~ThriftHadoopFileSystem_reportBadBlocks_args() throw() {}

  std::vector<TLocatedBlock>  blocks;

  _ThriftHadoopFileSystem_reportBadBlocks_args__isset __isset;

  void __set_blocks(const std::vector<TLocatedBlock> & val) {
    blocks = val;
  }

  bool operator == (const ThriftHadoopFileSystem_reportBadBlocks_args & rhs) const
  {
    if (!(blocks == rhs.blocks))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_reportBadBlocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_reportBadBlocks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_reportBadBlocks_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_reportBadBlocks_pargs() throw() {}

  const std::vector<TLocatedBlock> * blocks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_reportBadBlocks_result__isset {
  _ThriftHadoopFileSystem_reportBadBlocks_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_reportBadBlocks_result__isset;

class ThriftHadoopFileSystem_reportBadBlocks_result {
 public:

  ThriftHadoopFileSystem_reportBadBlocks_result() {
  }

  virtual ~ThriftHadoopFileSystem_reportBadBlocks_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_reportBadBlocks_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_reportBadBlocks_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_reportBadBlocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_reportBadBlocks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_reportBadBlocks_presult__isset {
  _ThriftHadoopFileSystem_reportBadBlocks_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_reportBadBlocks_presult__isset;

class ThriftHadoopFileSystem_reportBadBlocks_presult {
 public:


  virtual ~ThriftHadoopFileSystem_reportBadBlocks_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_reportBadBlocks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThriftHadoopFileSystem_getDataTransferProtocolVersion_args {
 public:

  ThriftHadoopFileSystem_getDataTransferProtocolVersion_args() {
  }

  virtual ~ThriftHadoopFileSystem_getDataTransferProtocolVersion_args() throw() {}


  bool operator == (const ThriftHadoopFileSystem_getDataTransferProtocolVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_getDataTransferProtocolVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_getDataTransferProtocolVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_getDataTransferProtocolVersion_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_getDataTransferProtocolVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_getDataTransferProtocolVersion_result__isset {
  _ThriftHadoopFileSystem_getDataTransferProtocolVersion_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_getDataTransferProtocolVersion_result__isset;

class ThriftHadoopFileSystem_getDataTransferProtocolVersion_result {
 public:

  ThriftHadoopFileSystem_getDataTransferProtocolVersion_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_getDataTransferProtocolVersion_result() throw() {}

  int32_t success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_getDataTransferProtocolVersion_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_getDataTransferProtocolVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_getDataTransferProtocolVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_getDataTransferProtocolVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_getDataTransferProtocolVersion_presult__isset {
  _ThriftHadoopFileSystem_getDataTransferProtocolVersion_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_getDataTransferProtocolVersion_presult__isset;

class ThriftHadoopFileSystem_getDataTransferProtocolVersion_presult {
 public:


  virtual ~ThriftHadoopFileSystem_getDataTransferProtocolVersion_presult() throw() {}

  int32_t* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_getDataTransferProtocolVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_renewLease_args__isset {
  _ThriftHadoopFileSystem_renewLease_args__isset() : clientName(false) {}
  bool clientName;
} _ThriftHadoopFileSystem_renewLease_args__isset;

class ThriftHadoopFileSystem_renewLease_args {
 public:

  ThriftHadoopFileSystem_renewLease_args() : clientName("") {
  }

  virtual ~ThriftHadoopFileSystem_renewLease_args() throw() {}

  std::string clientName;

  _ThriftHadoopFileSystem_renewLease_args__isset __isset;

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  bool operator == (const ThriftHadoopFileSystem_renewLease_args & rhs) const
  {
    if (!(clientName == rhs.clientName))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_renewLease_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_renewLease_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_renewLease_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_renewLease_pargs() throw() {}

  const std::string* clientName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_renewLease_result__isset {
  _ThriftHadoopFileSystem_renewLease_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_renewLease_result__isset;

class ThriftHadoopFileSystem_renewLease_result {
 public:

  ThriftHadoopFileSystem_renewLease_result() {
  }

  virtual ~ThriftHadoopFileSystem_renewLease_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_renewLease_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_renewLease_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_renewLease_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_renewLease_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_renewLease_presult__isset {
  _ThriftHadoopFileSystem_renewLease_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_renewLease_presult__isset;

class ThriftHadoopFileSystem_renewLease_presult {
 public:


  virtual ~ThriftHadoopFileSystem_renewLease_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_renewLease_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_recoverLease_args__isset {
  _ThriftHadoopFileSystem_recoverLease_args__isset() : path(false), clientName(false) {}
  bool path;
  bool clientName;
} _ThriftHadoopFileSystem_recoverLease_args__isset;

class ThriftHadoopFileSystem_recoverLease_args {
 public:

  ThriftHadoopFileSystem_recoverLease_args() : clientName("") {
  }

  virtual ~ThriftHadoopFileSystem_recoverLease_args() throw() {}

  Pathname path;
  std::string clientName;

  _ThriftHadoopFileSystem_recoverLease_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  bool operator == (const ThriftHadoopFileSystem_recoverLease_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_recoverLease_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_recoverLease_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_recoverLease_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_recoverLease_pargs() throw() {}

  const Pathname* path;
  const std::string* clientName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_recoverLease_result__isset {
  _ThriftHadoopFileSystem_recoverLease_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_recoverLease_result__isset;

class ThriftHadoopFileSystem_recoverLease_result {
 public:

  ThriftHadoopFileSystem_recoverLease_result() {
  }

  virtual ~ThriftHadoopFileSystem_recoverLease_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_recoverLease_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_recoverLease_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_recoverLease_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_recoverLease_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_recoverLease_presult__isset {
  _ThriftHadoopFileSystem_recoverLease_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_recoverLease_presult__isset;

class ThriftHadoopFileSystem_recoverLease_presult {
 public:


  virtual ~ThriftHadoopFileSystem_recoverLease_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_recoverLease_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_closeRecoverLease_args__isset {
  _ThriftHadoopFileSystem_closeRecoverLease_args__isset() : path(false), clientName(false), discardLastBlock(false) {}
  bool path;
  bool clientName;
  bool discardLastBlock;
} _ThriftHadoopFileSystem_closeRecoverLease_args__isset;

class ThriftHadoopFileSystem_closeRecoverLease_args {
 public:

  ThriftHadoopFileSystem_closeRecoverLease_args() : clientName(""), discardLastBlock(0) {
  }

  virtual ~ThriftHadoopFileSystem_closeRecoverLease_args() throw() {}

  Pathname path;
  std::string clientName;
  bool discardLastBlock;

  _ThriftHadoopFileSystem_closeRecoverLease_args__isset __isset;

  void __set_path(const Pathname& val) {
    path = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  void __set_discardLastBlock(const bool val) {
    discardLastBlock = val;
  }

  bool operator == (const ThriftHadoopFileSystem_closeRecoverLease_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    if (!(discardLastBlock == rhs.discardLastBlock))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_closeRecoverLease_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_closeRecoverLease_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_closeRecoverLease_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_closeRecoverLease_pargs() throw() {}

  const Pathname* path;
  const std::string* clientName;
  const bool* discardLastBlock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_closeRecoverLease_result__isset {
  _ThriftHadoopFileSystem_closeRecoverLease_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_closeRecoverLease_result__isset;

class ThriftHadoopFileSystem_closeRecoverLease_result {
 public:

  ThriftHadoopFileSystem_closeRecoverLease_result() {
  }

  virtual ~ThriftHadoopFileSystem_closeRecoverLease_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_closeRecoverLease_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_closeRecoverLease_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_closeRecoverLease_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_closeRecoverLease_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_closeRecoverLease_presult__isset {
  _ThriftHadoopFileSystem_closeRecoverLease_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_closeRecoverLease_presult__isset;

class ThriftHadoopFileSystem_closeRecoverLease_presult {
 public:


  virtual ~ThriftHadoopFileSystem_closeRecoverLease_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_closeRecoverLease_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_abandonBlock_args__isset {
  _ThriftHadoopFileSystem_abandonBlock_args__isset() : block(false), pathname(false), clientName(false) {}
  bool block;
  bool pathname;
  bool clientName;
} _ThriftHadoopFileSystem_abandonBlock_args__isset;

class ThriftHadoopFileSystem_abandonBlock_args {
 public:

  ThriftHadoopFileSystem_abandonBlock_args() : clientName("") {
  }

  virtual ~ThriftHadoopFileSystem_abandonBlock_args() throw() {}

  TBlock block;
  Pathname pathname;
  std::string clientName;

  _ThriftHadoopFileSystem_abandonBlock_args__isset __isset;

  void __set_block(const TBlock& val) {
    block = val;
  }

  void __set_pathname(const Pathname& val) {
    pathname = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  bool operator == (const ThriftHadoopFileSystem_abandonBlock_args & rhs) const
  {
    if (!(block == rhs.block))
      return false;
    if (!(pathname == rhs.pathname))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_abandonBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_abandonBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_abandonBlock_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_abandonBlock_pargs() throw() {}

  const TBlock* block;
  const Pathname* pathname;
  const std::string* clientName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_abandonBlock_result__isset {
  _ThriftHadoopFileSystem_abandonBlock_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_abandonBlock_result__isset;

class ThriftHadoopFileSystem_abandonBlock_result {
 public:

  ThriftHadoopFileSystem_abandonBlock_result() {
  }

  virtual ~ThriftHadoopFileSystem_abandonBlock_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_abandonBlock_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_abandonBlock_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_abandonBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_abandonBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_abandonBlock_presult__isset {
  _ThriftHadoopFileSystem_abandonBlock_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_abandonBlock_presult__isset;

class ThriftHadoopFileSystem_abandonBlock_presult {
 public:


  virtual ~ThriftHadoopFileSystem_abandonBlock_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_abandonBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_abandonFile_args__isset {
  _ThriftHadoopFileSystem_abandonFile_args__isset() : pathname(false), clientName(false) {}
  bool pathname;
  bool clientName;
} _ThriftHadoopFileSystem_abandonFile_args__isset;

class ThriftHadoopFileSystem_abandonFile_args {
 public:

  ThriftHadoopFileSystem_abandonFile_args() : clientName("") {
  }

  virtual ~ThriftHadoopFileSystem_abandonFile_args() throw() {}

  Pathname pathname;
  std::string clientName;

  _ThriftHadoopFileSystem_abandonFile_args__isset __isset;

  void __set_pathname(const Pathname& val) {
    pathname = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  bool operator == (const ThriftHadoopFileSystem_abandonFile_args & rhs) const
  {
    if (!(pathname == rhs.pathname))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_abandonFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_abandonFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_abandonFile_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_abandonFile_pargs() throw() {}

  const Pathname* pathname;
  const std::string* clientName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_abandonFile_result__isset {
  _ThriftHadoopFileSystem_abandonFile_result__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_abandonFile_result__isset;

class ThriftHadoopFileSystem_abandonFile_result {
 public:

  ThriftHadoopFileSystem_abandonFile_result() {
  }

  virtual ~ThriftHadoopFileSystem_abandonFile_result() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_abandonFile_result__isset __isset;

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_abandonFile_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_abandonFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_abandonFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_abandonFile_presult__isset {
  _ThriftHadoopFileSystem_abandonFile_presult__isset() : ouch(false) {}
  bool ouch;
} _ThriftHadoopFileSystem_abandonFile_presult__isset;

class ThriftHadoopFileSystem_abandonFile_presult {
 public:


  virtual ~ThriftHadoopFileSystem_abandonFile_presult() throw() {}

  ThriftIOException ouch;

  _ThriftHadoopFileSystem_abandonFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_addBlock_args__isset {
  _ThriftHadoopFileSystem_addBlock_args__isset() : pathname(false), clientName(false), startOffset(false), lastBlock(false), excludedNodes(false), favouredNodes(false) {}
  bool pathname;
  bool clientName;
  bool startOffset;
  bool lastBlock;
  bool excludedNodes;
  bool favouredNodes;
} _ThriftHadoopFileSystem_addBlock_args__isset;

class ThriftHadoopFileSystem_addBlock_args {
 public:

  ThriftHadoopFileSystem_addBlock_args() : clientName(""), startOffset(0) {
  }

  virtual ~ThriftHadoopFileSystem_addBlock_args() throw() {}

  Pathname pathname;
  std::string clientName;
  int64_t startOffset;
  TBlock lastBlock;
  std::vector<TDatanodeID>  excludedNodes;
  std::vector<TDatanodeID>  favouredNodes;

  _ThriftHadoopFileSystem_addBlock_args__isset __isset;

  void __set_pathname(const Pathname& val) {
    pathname = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  void __set_startOffset(const int64_t val) {
    startOffset = val;
  }

  void __set_lastBlock(const TBlock& val) {
    lastBlock = val;
  }

  void __set_excludedNodes(const std::vector<TDatanodeID> & val) {
    excludedNodes = val;
  }

  void __set_favouredNodes(const std::vector<TDatanodeID> & val) {
    favouredNodes = val;
  }

  bool operator == (const ThriftHadoopFileSystem_addBlock_args & rhs) const
  {
    if (!(pathname == rhs.pathname))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    if (!(startOffset == rhs.startOffset))
      return false;
    if (!(lastBlock == rhs.lastBlock))
      return false;
    if (!(excludedNodes == rhs.excludedNodes))
      return false;
    if (!(favouredNodes == rhs.favouredNodes))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_addBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_addBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_addBlock_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_addBlock_pargs() throw() {}

  const Pathname* pathname;
  const std::string* clientName;
  const int64_t* startOffset;
  const TBlock* lastBlock;
  const std::vector<TDatanodeID> * excludedNodes;
  const std::vector<TDatanodeID> * favouredNodes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_addBlock_result__isset {
  _ThriftHadoopFileSystem_addBlock_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_addBlock_result__isset;

class ThriftHadoopFileSystem_addBlock_result {
 public:

  ThriftHadoopFileSystem_addBlock_result() {
  }

  virtual ~ThriftHadoopFileSystem_addBlock_result() throw() {}

  TLocatedBlock success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_addBlock_result__isset __isset;

  void __set_success(const TLocatedBlock& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_addBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_addBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_addBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_addBlock_presult__isset {
  _ThriftHadoopFileSystem_addBlock_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_addBlock_presult__isset;

class ThriftHadoopFileSystem_addBlock_presult {
 public:


  virtual ~ThriftHadoopFileSystem_addBlock_presult() throw() {}

  TLocatedBlock* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_addBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_addFirstBlock_args__isset {
  _ThriftHadoopFileSystem_addFirstBlock_args__isset() : pathname(false), clientName(false), excludedNodes(false), favouredNodes(false) {}
  bool pathname;
  bool clientName;
  bool excludedNodes;
  bool favouredNodes;
} _ThriftHadoopFileSystem_addFirstBlock_args__isset;

class ThriftHadoopFileSystem_addFirstBlock_args {
 public:

  ThriftHadoopFileSystem_addFirstBlock_args() : clientName("") {
  }

  virtual ~ThriftHadoopFileSystem_addFirstBlock_args() throw() {}

  Pathname pathname;
  std::string clientName;
  std::vector<TDatanodeID>  excludedNodes;
  std::vector<TDatanodeID>  favouredNodes;

  _ThriftHadoopFileSystem_addFirstBlock_args__isset __isset;

  void __set_pathname(const Pathname& val) {
    pathname = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  void __set_excludedNodes(const std::vector<TDatanodeID> & val) {
    excludedNodes = val;
  }

  void __set_favouredNodes(const std::vector<TDatanodeID> & val) {
    favouredNodes = val;
  }

  bool operator == (const ThriftHadoopFileSystem_addFirstBlock_args & rhs) const
  {
    if (!(pathname == rhs.pathname))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    if (!(excludedNodes == rhs.excludedNodes))
      return false;
    if (!(favouredNodes == rhs.favouredNodes))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_addFirstBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_addFirstBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_addFirstBlock_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_addFirstBlock_pargs() throw() {}

  const Pathname* pathname;
  const std::string* clientName;
  const std::vector<TDatanodeID> * excludedNodes;
  const std::vector<TDatanodeID> * favouredNodes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_addFirstBlock_result__isset {
  _ThriftHadoopFileSystem_addFirstBlock_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_addFirstBlock_result__isset;

class ThriftHadoopFileSystem_addFirstBlock_result {
 public:

  ThriftHadoopFileSystem_addFirstBlock_result() {
  }

  virtual ~ThriftHadoopFileSystem_addFirstBlock_result() throw() {}

  TLocatedBlock success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_addFirstBlock_result__isset __isset;

  void __set_success(const TLocatedBlock& val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_addFirstBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_addFirstBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_addFirstBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_addFirstBlock_presult__isset {
  _ThriftHadoopFileSystem_addFirstBlock_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_addFirstBlock_presult__isset;

class ThriftHadoopFileSystem_addFirstBlock_presult {
 public:


  virtual ~ThriftHadoopFileSystem_addFirstBlock_presult() throw() {}

  TLocatedBlock* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_addFirstBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftHadoopFileSystem_complete_args__isset {
  _ThriftHadoopFileSystem_complete_args__isset() : pathname(false), clientName(false), fileLen(false), lastBlock(false) {}
  bool pathname;
  bool clientName;
  bool fileLen;
  bool lastBlock;
} _ThriftHadoopFileSystem_complete_args__isset;

class ThriftHadoopFileSystem_complete_args {
 public:

  ThriftHadoopFileSystem_complete_args() : clientName(""), fileLen(0) {
  }

  virtual ~ThriftHadoopFileSystem_complete_args() throw() {}

  Pathname pathname;
  std::string clientName;
  int64_t fileLen;
  TBlock lastBlock;

  _ThriftHadoopFileSystem_complete_args__isset __isset;

  void __set_pathname(const Pathname& val) {
    pathname = val;
  }

  void __set_clientName(const std::string& val) {
    clientName = val;
  }

  void __set_fileLen(const int64_t val) {
    fileLen = val;
  }

  void __set_lastBlock(const TBlock& val) {
    lastBlock = val;
  }

  bool operator == (const ThriftHadoopFileSystem_complete_args & rhs) const
  {
    if (!(pathname == rhs.pathname))
      return false;
    if (!(clientName == rhs.clientName))
      return false;
    if (!(fileLen == rhs.fileLen))
      return false;
    if (!(lastBlock == rhs.lastBlock))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_complete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_complete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftHadoopFileSystem_complete_pargs {
 public:


  virtual ~ThriftHadoopFileSystem_complete_pargs() throw() {}

  const Pathname* pathname;
  const std::string* clientName;
  const int64_t* fileLen;
  const TBlock* lastBlock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_complete_result__isset {
  _ThriftHadoopFileSystem_complete_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_complete_result__isset;

class ThriftHadoopFileSystem_complete_result {
 public:

  ThriftHadoopFileSystem_complete_result() : success(0) {
  }

  virtual ~ThriftHadoopFileSystem_complete_result() throw() {}

  bool success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_complete_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ouch(const ThriftIOException& val) {
    ouch = val;
  }

  bool operator == (const ThriftHadoopFileSystem_complete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ThriftHadoopFileSystem_complete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHadoopFileSystem_complete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftHadoopFileSystem_complete_presult__isset {
  _ThriftHadoopFileSystem_complete_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ThriftHadoopFileSystem_complete_presult__isset;

class ThriftHadoopFileSystem_complete_presult {
 public:


  virtual ~ThriftHadoopFileSystem_complete_presult() throw() {}

  bool* success;
  ThriftIOException ouch;

  _ThriftHadoopFileSystem_complete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHadoopFileSystemClient : virtual public ThriftHadoopFileSystemIf {
 public:
  ThriftHadoopFileSystemClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ThriftHadoopFileSystemClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setInactivityTimeoutPeriod(const int64_t periodInSeconds);
  void send_setInactivityTimeoutPeriod(const int64_t periodInSeconds);
  void recv_setInactivityTimeoutPeriod();
  void shutdown(const int32_t status);
  void send_shutdown(const int32_t status);
  void recv_shutdown();
  void create(ThriftHandle& _return, const Pathname& path);
  void send_create(const Pathname& path);
  void recv_create(ThriftHandle& _return);
  void createFile(ThriftHandle& _return, const Pathname& path, const int16_t mode, const bool overwrite, const int32_t bufferSize, const int16_t block_replication, const int64_t blocksize);
  void send_createFile(const Pathname& path, const int16_t mode, const bool overwrite, const int32_t bufferSize, const int16_t block_replication, const int64_t blocksize);
  void recv_createFile(ThriftHandle& _return);
  void open(ThriftHandle& _return, const Pathname& path);
  void send_open(const Pathname& path);
  void recv_open(ThriftHandle& _return);
  void append(ThriftHandle& _return, const Pathname& path);
  void send_append(const Pathname& path);
  void recv_append(ThriftHandle& _return);
  bool write(const ThriftHandle& handle, const std::string& data);
  void send_write(const ThriftHandle& handle, const std::string& data);
  bool recv_write();
  void read(std::string& _return, const ThriftHandle& handle, const int64_t offset, const int32_t size);
  void send_read(const ThriftHandle& handle, const int64_t offset, const int32_t size);
  void recv_read(std::string& _return);
  bool close(const ThriftHandle& out);
  void send_close(const ThriftHandle& out);
  bool recv_close();
  bool rm(const Pathname& path, const bool recursive);
  void send_rm(const Pathname& path, const bool recursive);
  bool recv_rm();
  bool rename(const Pathname& path, const Pathname& dest);
  void send_rename(const Pathname& path, const Pathname& dest);
  bool recv_rename();
  bool mkdirs(const Pathname& path);
  void send_mkdirs(const Pathname& path);
  bool recv_mkdirs();
  bool exists(const Pathname& path);
  void send_exists(const Pathname& path);
  bool recv_exists();
  void stat(FileStatus& _return, const Pathname& path);
  void send_stat(const Pathname& path);
  void recv_stat(FileStatus& _return);
  void listStatus(std::vector<FileStatus> & _return, const Pathname& path);
  void send_listStatus(const Pathname& path);
  void recv_listStatus(std::vector<FileStatus> & _return);
  void chmod(const Pathname& path, const int16_t mode);
  void send_chmod(const Pathname& path, const int16_t mode);
  void recv_chmod();
  void chown(const Pathname& path, const std::string& owner, const std::string& group);
  void send_chown(const Pathname& path, const std::string& owner, const std::string& group);
  void recv_chown();
  void setReplication(const Pathname& path, const int16_t replication);
  void send_setReplication(const Pathname& path, const int16_t replication);
  void recv_setReplication();
  void getFileBlockLocations(std::vector<BlockLocation> & _return, const Pathname& path, const int64_t start, const int64_t length);
  void send_getFileBlockLocations(const Pathname& path, const int64_t start, const int64_t length);
  void recv_getFileBlockLocations(std::vector<BlockLocation> & _return);
  bool hardLink(const Pathname& src, const Pathname& dest);
  void send_hardLink(const Pathname& src, const Pathname& dest);
  bool recv_hardLink();
  void concat(const Pathname& target, const std::vector<Pathname> & srcs, const bool restricted);
  void send_concat(const Pathname& target, const std::vector<Pathname> & srcs, const bool restricted);
  void recv_concat();
  void reportBadBlocks(const std::vector<TLocatedBlock> & blocks);
  void send_reportBadBlocks(const std::vector<TLocatedBlock> & blocks);
  void recv_reportBadBlocks();
  int32_t getDataTransferProtocolVersion();
  void send_getDataTransferProtocolVersion();
  int32_t recv_getDataTransferProtocolVersion();
  void renewLease(const std::string& clientName);
  void send_renewLease(const std::string& clientName);
  void recv_renewLease();
  void recoverLease(const Pathname& path, const std::string& clientName);
  void send_recoverLease(const Pathname& path, const std::string& clientName);
  void recv_recoverLease();
  void closeRecoverLease(const Pathname& path, const std::string& clientName, const bool discardLastBlock);
  void send_closeRecoverLease(const Pathname& path, const std::string& clientName, const bool discardLastBlock);
  void recv_closeRecoverLease();
  void abandonBlock(const TBlock& block, const Pathname& pathname, const std::string& clientName);
  void send_abandonBlock(const TBlock& block, const Pathname& pathname, const std::string& clientName);
  void recv_abandonBlock();
  void abandonFile(const Pathname& pathname, const std::string& clientName);
  void send_abandonFile(const Pathname& pathname, const std::string& clientName);
  void recv_abandonFile();
  void addBlock(TLocatedBlock& _return, const Pathname& pathname, const std::string& clientName, const int64_t startOffset, const TBlock& lastBlock, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes);
  void send_addBlock(const Pathname& pathname, const std::string& clientName, const int64_t startOffset, const TBlock& lastBlock, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes);
  void recv_addBlock(TLocatedBlock& _return);
  void addFirstBlock(TLocatedBlock& _return, const Pathname& pathname, const std::string& clientName, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes);
  void send_addFirstBlock(const Pathname& pathname, const std::string& clientName, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes);
  void recv_addFirstBlock(TLocatedBlock& _return);
  bool complete(const Pathname& pathname, const std::string& clientName, const int64_t fileLen, const TBlock& lastBlock);
  void send_complete(const Pathname& pathname, const std::string& clientName, const int64_t fileLen, const TBlock& lastBlock);
  bool recv_complete();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftHadoopFileSystemProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ThriftHadoopFileSystemIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ThriftHadoopFileSystemProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_setInactivityTimeoutPeriod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_open(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mkdirs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chmod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setReplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileBlockLocations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hardLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_concat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportBadBlocks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDataTransferProtocolVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renewLease(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recoverLease(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeRecoverLease(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_abandonBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_abandonFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFirstBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_complete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftHadoopFileSystemProcessor(boost::shared_ptr<ThriftHadoopFileSystemIf> iface) :
    iface_(iface) {
    processMap_["setInactivityTimeoutPeriod"] = &ThriftHadoopFileSystemProcessor::process_setInactivityTimeoutPeriod;
    processMap_["shutdown"] = &ThriftHadoopFileSystemProcessor::process_shutdown;
    processMap_["create"] = &ThriftHadoopFileSystemProcessor::process_create;
    processMap_["createFile"] = &ThriftHadoopFileSystemProcessor::process_createFile;
    processMap_["open"] = &ThriftHadoopFileSystemProcessor::process_open;
    processMap_["append"] = &ThriftHadoopFileSystemProcessor::process_append;
    processMap_["write"] = &ThriftHadoopFileSystemProcessor::process_write;
    processMap_["read"] = &ThriftHadoopFileSystemProcessor::process_read;
    processMap_["close"] = &ThriftHadoopFileSystemProcessor::process_close;
    processMap_["rm"] = &ThriftHadoopFileSystemProcessor::process_rm;
    processMap_["rename"] = &ThriftHadoopFileSystemProcessor::process_rename;
    processMap_["mkdirs"] = &ThriftHadoopFileSystemProcessor::process_mkdirs;
    processMap_["exists"] = &ThriftHadoopFileSystemProcessor::process_exists;
    processMap_["stat"] = &ThriftHadoopFileSystemProcessor::process_stat;
    processMap_["listStatus"] = &ThriftHadoopFileSystemProcessor::process_listStatus;
    processMap_["chmod"] = &ThriftHadoopFileSystemProcessor::process_chmod;
    processMap_["chown"] = &ThriftHadoopFileSystemProcessor::process_chown;
    processMap_["setReplication"] = &ThriftHadoopFileSystemProcessor::process_setReplication;
    processMap_["getFileBlockLocations"] = &ThriftHadoopFileSystemProcessor::process_getFileBlockLocations;
    processMap_["hardLink"] = &ThriftHadoopFileSystemProcessor::process_hardLink;
    processMap_["concat"] = &ThriftHadoopFileSystemProcessor::process_concat;
    processMap_["reportBadBlocks"] = &ThriftHadoopFileSystemProcessor::process_reportBadBlocks;
    processMap_["getDataTransferProtocolVersion"] = &ThriftHadoopFileSystemProcessor::process_getDataTransferProtocolVersion;
    processMap_["renewLease"] = &ThriftHadoopFileSystemProcessor::process_renewLease;
    processMap_["recoverLease"] = &ThriftHadoopFileSystemProcessor::process_recoverLease;
    processMap_["closeRecoverLease"] = &ThriftHadoopFileSystemProcessor::process_closeRecoverLease;
    processMap_["abandonBlock"] = &ThriftHadoopFileSystemProcessor::process_abandonBlock;
    processMap_["abandonFile"] = &ThriftHadoopFileSystemProcessor::process_abandonFile;
    processMap_["addBlock"] = &ThriftHadoopFileSystemProcessor::process_addBlock;
    processMap_["addFirstBlock"] = &ThriftHadoopFileSystemProcessor::process_addFirstBlock;
    processMap_["complete"] = &ThriftHadoopFileSystemProcessor::process_complete;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ThriftHadoopFileSystemProcessor() {}
};

class ThriftHadoopFileSystemMultiface : virtual public ThriftHadoopFileSystemIf {
 public:
  ThriftHadoopFileSystemMultiface(std::vector<boost::shared_ptr<ThriftHadoopFileSystemIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftHadoopFileSystemMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftHadoopFileSystemIf> > ifaces_;
  ThriftHadoopFileSystemMultiface() {}
  void add(boost::shared_ptr<ThriftHadoopFileSystemIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setInactivityTimeoutPeriod(const int64_t periodInSeconds) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->setInactivityTimeoutPeriod(periodInSeconds);
    }
  }

  void shutdown(const int32_t status) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown(status);
    }
  }

  void create(ThriftHandle& _return, const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->create(_return, path);
        return;
      } else {
        ifaces_[i]->create(_return, path);
      }
    }
  }

  void createFile(ThriftHandle& _return, const Pathname& path, const int16_t mode, const bool overwrite, const int32_t bufferSize, const int16_t block_replication, const int64_t blocksize) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->createFile(_return, path, mode, overwrite, bufferSize, block_replication, blocksize);
        return;
      } else {
        ifaces_[i]->createFile(_return, path, mode, overwrite, bufferSize, block_replication, blocksize);
      }
    }
  }

  void open(ThriftHandle& _return, const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->open(_return, path);
        return;
      } else {
        ifaces_[i]->open(_return, path);
      }
    }
  }

  void append(ThriftHandle& _return, const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->append(_return, path);
        return;
      } else {
        ifaces_[i]->append(_return, path);
      }
    }
  }

  bool write(const ThriftHandle& handle, const std::string& data) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->write(handle, data);
      } else {
        ifaces_[i]->write(handle, data);
      }
    }
  }

  void read(std::string& _return, const ThriftHandle& handle, const int64_t offset, const int32_t size) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->read(_return, handle, offset, size);
        return;
      } else {
        ifaces_[i]->read(_return, handle, offset, size);
      }
    }
  }

  bool close(const ThriftHandle& out) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->close(out);
      } else {
        ifaces_[i]->close(out);
      }
    }
  }

  bool rm(const Pathname& path, const bool recursive) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->rm(path, recursive);
      } else {
        ifaces_[i]->rm(path, recursive);
      }
    }
  }

  bool rename(const Pathname& path, const Pathname& dest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->rename(path, dest);
      } else {
        ifaces_[i]->rename(path, dest);
      }
    }
  }

  bool mkdirs(const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->mkdirs(path);
      } else {
        ifaces_[i]->mkdirs(path);
      }
    }
  }

  bool exists(const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->exists(path);
      } else {
        ifaces_[i]->exists(path);
      }
    }
  }

  void stat(FileStatus& _return, const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->stat(_return, path);
        return;
      } else {
        ifaces_[i]->stat(_return, path);
      }
    }
  }

  void listStatus(std::vector<FileStatus> & _return, const Pathname& path) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->listStatus(_return, path);
        return;
      } else {
        ifaces_[i]->listStatus(_return, path);
      }
    }
  }

  void chmod(const Pathname& path, const int16_t mode) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->chmod(path, mode);
    }
  }

  void chown(const Pathname& path, const std::string& owner, const std::string& group) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->chown(path, owner, group);
    }
  }

  void setReplication(const Pathname& path, const int16_t replication) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->setReplication(path, replication);
    }
  }

  void getFileBlockLocations(std::vector<BlockLocation> & _return, const Pathname& path, const int64_t start, const int64_t length) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getFileBlockLocations(_return, path, start, length);
        return;
      } else {
        ifaces_[i]->getFileBlockLocations(_return, path, start, length);
      }
    }
  }

  bool hardLink(const Pathname& src, const Pathname& dest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->hardLink(src, dest);
      } else {
        ifaces_[i]->hardLink(src, dest);
      }
    }
  }

  void concat(const Pathname& target, const std::vector<Pathname> & srcs, const bool restricted) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->concat(target, srcs, restricted);
    }
  }

  void reportBadBlocks(const std::vector<TLocatedBlock> & blocks) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->reportBadBlocks(blocks);
    }
  }

  int32_t getDataTransferProtocolVersion() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getDataTransferProtocolVersion();
      } else {
        ifaces_[i]->getDataTransferProtocolVersion();
      }
    }
  }

  void renewLease(const std::string& clientName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->renewLease(clientName);
    }
  }

  void recoverLease(const Pathname& path, const std::string& clientName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->recoverLease(path, clientName);
    }
  }

  void closeRecoverLease(const Pathname& path, const std::string& clientName, const bool discardLastBlock) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->closeRecoverLease(path, clientName, discardLastBlock);
    }
  }

  void abandonBlock(const TBlock& block, const Pathname& pathname, const std::string& clientName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->abandonBlock(block, pathname, clientName);
    }
  }

  void abandonFile(const Pathname& pathname, const std::string& clientName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->abandonFile(pathname, clientName);
    }
  }

  void addBlock(TLocatedBlock& _return, const Pathname& pathname, const std::string& clientName, const int64_t startOffset, const TBlock& lastBlock, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->addBlock(_return, pathname, clientName, startOffset, lastBlock, excludedNodes, favouredNodes);
        return;
      } else {
        ifaces_[i]->addBlock(_return, pathname, clientName, startOffset, lastBlock, excludedNodes, favouredNodes);
      }
    }
  }

  void addFirstBlock(TLocatedBlock& _return, const Pathname& pathname, const std::string& clientName, const std::vector<TDatanodeID> & excludedNodes, const std::vector<TDatanodeID> & favouredNodes) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->addFirstBlock(_return, pathname, clientName, excludedNodes, favouredNodes);
        return;
      } else {
        ifaces_[i]->addFirstBlock(_return, pathname, clientName, excludedNodes, favouredNodes);
      }
    }
  }

  bool complete(const Pathname& pathname, const std::string& clientName, const int64_t fileLen, const TBlock& lastBlock) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->complete(pathname, clientName, fileLen, lastBlock);
      } else {
        ifaces_[i]->complete(pathname, clientName, fileLen, lastBlock);
      }
    }
  }

};



#endif
